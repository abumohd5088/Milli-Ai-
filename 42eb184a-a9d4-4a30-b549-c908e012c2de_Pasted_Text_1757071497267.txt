<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <meta name="description" content="Milli Ai - Official AI Assistant for Milli Karwaan Public School, Balrampur">
  <meta name="theme-color" content="#1a73e8" />
  <link rel="manifest" href="data:application/json;base64,ewogICJuYW1lIjogIk1pbGxpIEFpIiwKICAic2hvcnRfbmFtZSI6ICJNaWxsaSBBaSIsCiAgInN0YXJ0X3VybCI6ICJpbmRleC5odG1sIiwKICAidGhlbWVfY29sb3IiOiAiIzFhNzNlOCIsCiAgImJhY2tncm91bmRfY29sb3IiOiAiI2ZmZmZmZiIsCiAgImRpc3BsYXkiOiAic3RhbmRhbG9uZSIsCiAgInNjb3BlIjogIi8iLAogICJpY29ucyI6IFsKICAgIHsKICAgICAgInNyYyI6ICJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFNPTUUgREVBTCBMT0dPIFNWRyIsCiAgICAgICdzaXplcyI6ICIxOTJ4MTkyIiwKICAgICAgInR5cGUiOiAiaW1hZ2Uvc3ZnK3htbCIKICAgIH0KICBdCn0=">
  <title>Milli Ai | MKPS Balrampur</title>
  <style>
    :root {
      --accent: #1a73e8;
      --accent-hover: #1967d2;
      --accent-light: #e8f0fe;
      --bg-primary: #ffffff;
      --bg-secondary: #f8f9fa;
      --bg-tertiary: #f1f3f5;
      --text-primary: #1a1a1a;
      --text-secondary: #5f6368;
      --text-tertiary: #8e949a;
      --border: #dadce0;
      --sidebar-bg: #fcfcfc;
      --header-bg: #ffffff;
      --composer-bg: #ffffff;
      --card-shadow: 0 1px 2px rgba(0,0,0,0.1);
      --elevation-1: 0 1px 2px rgba(0,0,0,0.1);
      --elevation-2: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
      --elevation-3: 0 4px 8px rgba(0,0,0,0.15);
      --hover: #f0f8ff;
      --danger: #d93025;
      --danger-hover: #b3271e;
      --success: #0d9f2f;
      --info: #3182ce;
      --warning: #f5972d;
      --radius: 12px;
      --transition: all 0.2s ease;
      --toast-radius: 8px;
      --notification-badge: #e74c3c;
    }
    [data-theme="dark"] {
      --accent: #4dabf7;
      --accent-hover: #6cbdf8;
      --accent-light: #1a2e4d;
      --bg-primary: #121212;
      --bg-secondary: #1e1e1e;
      --bg-tertiary: #2d2d2d;
      --text-primary: #e0e0e0;
      --text-secondary: #bdc1c6;
      --text-tertiary: #9aa0a6;
      --border: #3c4043;
      --sidebar-bg: #1a1a1a;
      --header-bg: #1a1a1a;
      --composer-bg: #1e1e1e;
      --card-shadow: 0 1px 2px rgba(0,0,0,0.3);
      --elevation-1: 0 1px 2px rgba(0,0,0,0.3);
      --elevation-2: 0 1px 3px rgba(0,0,0,0.4), 0 1px 2px rgba(0,0,0,0.5);
      --elevation-3: 0 4px 8px rgba(0,0,0,0.4);
      --hover: #2a2a2a;
      --danger: #ea4335;
      --danger-hover: #b3271e;
      --success: #34a853;
      --info: #63b3ed;
      --warning: #f5972d;
      --notification-badge: #ff6b6b;
    }
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      font-family: 'Google Sans', 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      background-color: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.6;
      transition: background-color 0.3s, color 0.3s;
      height: 100vh;
      overflow: hidden;
      position: relative;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    button, input, textarea, select {
      font-family: inherit;
      font-size: 1rem;
      outline: none;
    }
    button {
      cursor: pointer;
      border: none;
      background: none;
      padding: 8px 12px;
      border-radius: 6px;
      transition: var(--transition);
    }
    button:hover {
      background-color: var(--hover);
    }
    button:focus {
      outline: 2px solid var(--accent);
      border-radius: 6px;
    }
    button:active {
      transform: scale(0.98);
    }
    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0,0,0,0);
      white-space: nowrap;
      border: 0;
    }
    .skip-link {
      position: absolute;
      top: -40px;
      left: 6px;
      z-index: 1000;
      padding: 8px;
      background: var(--accent);
      color: #000;
      text-decoration: none;
      border-radius: 4px;
      transition: top 0.3s;
    }
    .skip-link:focus {
      top: 6px;
    }
    .container {
      display: flex;
      height: 100vh;
    }
    /* Sidebar */
    .sidebar {
      width: 260px;
      background-color: var(--sidebar-bg);
      border-right: 1px solid var(--border);
      display: flex;
      flex-direction: column;
      transition: transform 0.3s ease;
      z-index: 10;
      height: 100%;
    }
    .sidebar-header {
      padding: 16px;
      display: flex;
      align-items: center;
      gap: 10px;
      border-bottom: 1px solid var(--border);
    }
    .logo {
      width: 32px;
      height: 32px;
    }
    .logo svg {
      fill: var(--accent);
    }
    .app-title {
      font-size: 1.4rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    .school-info {
      font-size: 0.8rem;
      color: var(--text-tertiary);
      margin-top: 2px;
    }
    .new-chat-btn {
      margin: 12px;
      padding: 10px 16px;
      background-color: var(--accent);
      color: #000;
      border-radius: var(--radius);
      font-weight: 500;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 6px;
      transition: var(--transition);
      box-shadow: var(--elevation-1);
    }
    .new-chat-btn:hover {
      background-color: var(--accent-hover);
      transform: translateY(-1px);
    }
    .new-chat-btn svg {
      width: 18px;
      height: 18px;
    }
    .chats-search {
      margin: 8px 12px;
      padding: 8px 12px;
      width: calc(100% - 24px);
      border: 1px solid var(--border);
      border-radius: 6px;
      background-color: var(--bg-primary);
      color: var(--text-primary);
      transition: border-color 0.2s;
    }
    .chats-search:focus {
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(0, 209, 255, 0.2);
    }
    .chats-list {
      flex: 1;
      overflow-y: auto;
      padding: 4px 0;
    }
    .chat-item {
      padding: 10px 12px;
      display: flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      border-radius: 6px;
      margin: 0 8px;
      position: relative;
      transition: var(--transition);
    }
    .chat-item:hover {
      background-color: var(--hover);
    }
    .chat-item.active {
      background-color: var(--hover);
      font-weight: 500;
    }
    .chat-pin {
      opacity: 0;
      color: var(--text-secondary);
      flex-shrink: 0;
    }
    .chat-item.pinned .chat-pin {
      opacity: 1;
    }
    .chat-title {
      flex: 1;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      font-size: 0.95rem;
    }
    .chat-actions {
      opacity: 0;
      display: flex;
      gap: 4px;
      flex-shrink: 0;
    }
    .chat-item:hover .chat-actions {
      opacity: 1;
    }
    .chat-action-btn {
      padding: 4px;
      color: var(--text-secondary);
      border-radius: 4px;
      transition: var(--transition);
    }
    .chat-action-btn:hover {
      color: var(--text-primary);
      background-color: var(--bg-tertiary);
    }
    /* Main */
    .main {
      flex: 1;
      display: flex;
      flex-direction: column;
      height: 100%;
    }
    .header {
      padding: 12px 16px;
      background-color: var(--header-bg);
      border-bottom: 1px solid var(--border);
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: var(--elevation-1);
      z-index: 5;
    }
    .header-left, .header-right {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    .search-btn, .theme-toggle, .lang-toggle, .settings-btn, .notifications-btn {
      padding: 6px;
      color: var(--text-secondary);
      border-radius: 50%;
      transition: var(--transition);
      position: relative;
    }
    .search-btn:hover, .theme-toggle:hover, .lang-toggle:hover, .settings-btn:hover, .notifications-btn:hover {
      color: var(--text-primary);
      background-color: var(--hover);
    }
    .notification-badge {
      position: absolute;
      top: 4px;
      right: 4px;
      background-color: var(--notification-badge);
      color: white;
      font-size: 0.7rem;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }
    .dark-mode-indicator {
      width: 16px;
      height: 16px;
    }
    /* Chat Area */
    .chat-area {
      flex: 1;
      overflow-y: auto;
      padding: 20px;
      display: flex;
      flex-direction: column;
      gap: 16px;
      height: calc(100% - 120px);
    }
    .message {
      max-width: 80%;
      padding: 12px 16px;
      border-radius: var(--radius);
      background-color: var(--bg-secondary);
      position: relative;
      animation: fadeIn 0.3s ease-out;
      box-shadow: var(--card-shadow);
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .message.user {
      align-self: flex-end;
      background-color: var(--accent);
      color: #000;
    }
    .message.ai {
      align-self: flex-start;
      background-color: var(--bg-secondary);
    }
    .message.system {
      background-color: var(--accent-light);
      border-left: 4px solid var(--accent);
      max-width: 90%;
      font-style: italic;
      color: var(--text-secondary);
    }
    .message-header {
      display: flex;
      justify-content: space-between;
      font-size: 0.85rem;
      color: var(--text-secondary);
      margin-bottom: 6px;
    }
    .message-toolbar {
      position: absolute;
      top: 8px;
      right: 8px;
      display: flex;
      gap: 4px;
      opacity: 0;
      transition: opacity 0.2s;
      background-color: rgba(255, 255, 255, 0.8);
      border-radius: 8px;
      padding: 2px;
      backdrop-filter: blur(4px);
    }
    .message:hover .message-toolbar {
      opacity: 1;
    }
    .msg-action-btn {
      padding: 4px;
      color: var(--text-secondary);
      border-radius: 4px;
      transition: var(--transition);
    }
    .msg-action-btn:hover {
      color: var(--text-primary);
      background-color: var(--bg-tertiary);
    }
    .message-content {
      line-height: 1.5;
      font-size: 0.95rem;
    }
    .message-content p {
      margin: 0 0 0.5em;
    }
    .message-content p:last-child {
      margin-bottom: 0;
    }
    .message-content strong {
      font-weight: 600;
    }
    .message-content em {
      font-style: italic;
    }
    .message-content code {
      background-color: rgba(0,0,0,0.1);
      padding: 2px 4px;
      border-radius: 4px;
      font-family: monospace;
      font-size: 0.9em;
    }
    .message-content pre {
      background-color: var(--bg-tertiary);
      padding: 12px;
      border-radius: 8px;
      overflow-x: auto;
      margin: 8px 0;
      font-family: monospace;
      font-size: 0.9em;
      line-height: 1.4;
    }
    .message-content ul {
      list-style-type: disc;
      margin-left: 1.2em;
      margin-bottom: 0.5em;
    }
    .message-content ol {
      margin-left: 1.2em;
      margin-bottom: 0.5em;
    }
    .message-content li {
      margin: 0.2em 0;
    }
    .image-preview {
      margin-top: 8px;
      max-width: 200px;
      border-radius: 8px;
      overflow: hidden;
      border: 1px solid var(--border);
    }
    .image-preview img {
      width: 100%;
      height: auto;
      display: block;
    }
    .typing-indicator {
      display: flex;
      gap: 4px;
      align-items: center;
      padding: 4px 0;
    }
    .typing-dot {
      width: 6px;
      height: 6px;
      background-color: var(--text-secondary);
      border-radius: 50%;
      animation: bounce 1.4s infinite ease-in-out both;
    }
    .typing-dot:nth-child(1) { animation-delay: -0.32s; }
    .typing-dot:nth-child(2) { animation-delay: -0.16s; }
    /* Composer */
    .composer {
      padding: 16px;
      background-color: var(--composer-bg);
      border-top: 1px solid var(--border);
      display: flex;
      flex-direction: column;
      gap: 8px;
      box-shadow: var(--elevation-1);
    }
    .composer-top {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .upload-btn, .mic-btn, .tts-btn {
      padding: 8px;
      color: var(--text-secondary);
      border-radius: 6px;
      transition: var(--transition);
    }
    .upload-btn:hover, .mic-btn:hover, .tts-btn:hover {
      background-color: var(--hover);
    }
    .upload-btn svg, .mic-btn svg, .tts-btn svg {
      width: 20px;
      height: 20px;
    }
    .send-controls button {
      padding: 8px 12px;
      border-radius: 6px;
      font-weight: 500;
      font-size: 0.95rem;
      transition: var(--transition);
      box-shadow: var(--elevation-1);
    }
    .send-btn {
      background-color: var(--accent);
      color: #000;
    }
    .send-btn:hover {
      background-color: var(--accent-hover);
    }
    .stop-btn {
      background-color: var(--danger);
      color: white;
    }
    .stop-btn:hover {
      background-color: var(--danger-hover);
    }
    .composer-textarea {
      width: 100%;
      min-height: 60px;
      max-height: 200px;
      padding: 12px;
      border: 1px solid var(--border);
      border-radius: 8px;
      background-color: var(--bg-primary);
      color: var(--text-primary);
      resize: none;
      font-size: 1rem;
      line-height: 1.5;
      transition: border-color 0.2s, box-shadow 0.2s;
    }
    .composer-textarea:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(0, 209, 255, 0.2);
    }
    .token-counter {
      font-size: 0.85rem;
      color: var(--text-tertiary);
      text-align: right;
    }
    .suggestions-container {
      margin-top: 4px;
      display: flex;
      gap: 4px;
      flex-wrap: wrap;
    }
    .suggestion-chip {
      background-color: var(--bg-tertiary);
      padding: 4px 8px;
      border-radius: 16px;
      font-size: 0.8rem;
      cursor: pointer;
      transition: var(--transition);
    }
    .suggestion-chip:hover {
      background-color: var(--hover);
    }
    /* Overlay */
    .overlay {
      position: fixed;
      inset: 0;
      background-color: rgba(0,0,0,0.5);
      z-index: 9;
      display: none;
    }
    .overlay.active {
      display: block;
    }
    /* Settings Modal */
    .modal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.9);
      width: 90%;
      max-width: 500px;
      background-color: var(--bg-primary);
      border-radius: var(--radius);
      box-shadow: var(--elevation-2);
      z-index: 11;
      opacity: 0;
      pointer-events: none;
      transition: all 0.3s cubic-bezier(0.2, 0.8, 0.4, 1);
    }
    .modal.active {
      opacity: 1;
      pointer-events: auto;
      transform: translate(-50%, -50%) scale(1);
    }
    .modal-header {
      padding: 16px 20px;
      border-bottom: 1px solid var(--border);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .modal-title {
      font-size: 1.2rem;
      font-weight: 600;
    }
    .modal-close {
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--text-secondary);
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: var(--transition);
    }
    .modal-close:hover {
      background-color: var(--hover);
    }
    .modal-body {
      padding: 20px;
      max-height: 70vh;
      overflow-y: auto;
    }
    .form-group {
      margin-bottom: 16px;
    }
    .form-group label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      color: var(--text-primary);
    }
    .form-group input[type="text"],
    .form-group input[type="password"],
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid var(--border);
      border-radius: 6px;
      background-color: var(--bg-primary);
      color: var(--text-primary);
      transition: border-color 0.2s;
    }
    .form-group textarea {
      min-height: 80px;
      resize: vertical;
    }
    .form-group input[type="text"]:focus,
    .form-group input[type="password"]:focus,
    .form-group select:focus,
    .form-group textarea:focus {
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(0, 209, 255, 0.2);
    }
    .form-group input::placeholder {
      color: var(--text-tertiary);
    }
    .btn-group {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 20px;
    }
    .btn {
      padding: 10px 16px;
      border: none;
      border-radius: 6px;
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      box-shadow: var(--elevation-1);
    }
    .btn-primary {
      background-color: var(--accent);
      color: #000;
    }
    .btn-primary:hover {
      background-color: var(--accent-hover);
    }
    .btn-danger {
      background-color: var(--danger);
      color: white;
    }
    .btn-danger:hover {
      background-color: var(--danger-hover);
    }
    .btn-secondary {
      background-color: var(--bg-tertiary);
      color: var(--text-primary);
    }
    .btn-secondary:hover {
      background-color: var(--hover);
    }
    /* Error Banner */
    .error-banner {
      margin: 10px 0;
      padding: 12px;
      background-color: #fee;
      border: 1px solid #ecc;
      border-radius: 6px;
      color: #c00;
      display: none;
      animation: slideDown 0.3s ease-out;
    }
    @keyframes slideDown {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .error-banner.active {
      display: block;
    }
    .error-actions {
      margin-top: 8px;
      display: flex;
      gap: 8px;
    }
    .debug-toggle {
      color: var(--text-secondary);
      cursor: pointer;
      font-size: 0.9em;
      transition: color 0.2s;
    }
    .debug-toggle:hover {
      color: var(--text-primary);
    }
    .debug-response {
      margin-top: 8px;
      padding: 10px;
      background-color: var(--bg-tertiary);
      border-radius: 6px;
      font-size: 0.85em;
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid var(--border);
    }
    .debug-response.active {
      display: block;
    }
    /* Search Modal */
    .search-modal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0.9);
      width: 90%;
      max-width: 600px;
      background-color: var(--bg-primary);
      border-radius: var(--radius);
      box-shadow: var(--elevation-2);
      z-index: 11;
      opacity: 0;
      pointer-events: none;
      transition: all 0.3s cubic-bezier(0.2, 0.8, 0.4, 1);
    }
    .search-modal.active {
      opacity: 1;
      pointer-events: auto;
      transform: translate(-50%, -50%) scale(1);
    }
    .search-box {
      padding: 16px 20px;
      border-bottom: 1px solid var(--border);
    }
    .search-input {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--border);
      border-radius: 6px;
      background-color: var(--bg-primary);
      color: var(--text-primary);
      font-size: 1rem;
      transition: border-color 0.2s;
    }
    .search-input:focus {
      border-color: var(--accent);
      box-shadow: 0 0 0 2px rgba(0, 209, 255, 0.2);
    }
    .search-results {
      max-height: 400px;
      overflow-y: auto;
      padding: 10px 20px;
    }
    .search-result {
      padding: 10px 0;
      border-bottom: 1px solid var(--border);
    }
    .search-result-message {
      margin: 4px 0;
      padding: 6px 10px;
      background-color: var(--hover);
      border-radius: 6px;
      font-size: 0.95rem;
    }
    .search-highlight {
      background-color: #fff9c4;
      color: #000;
      padding: 0 2px;
      border-radius: 2px;
    }
    .search-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      padding: 16px 20px;
      border-top: 1px solid var(--border);
    }
    /* Welcome Message */
    .welcome-container {
      text-align: center;
      padding: 40px 20px;
      color: var(--text-secondary);
    }
    .welcome-logo {
      width: 80px;
      height: 80px;
      margin: 0 auto 20px;
      opacity: 0.8;
    }
    .welcome-logo svg {
      fill: var(--accent);
    }
    .welcome-title {
      font-size: 1.8rem;
      font-weight: 600;
      margin-bottom: 12px;
      color: var(--text-primary);
    }
    .welcome-subtitle {
      font-size: 1.1rem;
      margin-bottom: 24px;
      max-width: 500px;
      margin-left: auto;
      margin-right: auto;
    }
    .welcome-actions {
      display: flex;
      justify-content: center;
      gap: 12px;
      flex-wrap: wrap;
    }
    .welcome-btn {
      padding: 12px 24px;
      background-color: var(--accent);
      color: #000;
      border-radius: var(--radius);
      font-weight: 500;
      font-size: 1rem;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: var(--transition);
      box-shadow: var(--elevation-1);
    }
    .welcome-btn:hover {
      background-color: var(--accent-hover);
      transform: translateY(-1px);
    }
    .welcome-btn svg {
      width: 18px;
      height: 18px;
    }
    /* Chat Name Edit */
    .chat-title-edit {
      display: none;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--bg-primary);
      z-index: 10;
      padding: 10px 12px;
      border-radius: 6px;
    }
    .chat-title-input {
      width: 100%;
      padding: 4px;
      border: 1px solid var(--border);
      border-radius: 4px;
      background-color: var(--bg-primary);
      color: var(--text-primary);
    }
    .chat-item.editing .chat-title {
      display: none;
    }
    .chat-item.editing .chat-title-edit {
      display: block;
    }
    /* Toast Notifications */
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
      display: flex;
      flex-direction: column;
      gap: 10px;
      max-width: 350px;
    }
    .toast {
      background-color: var(--bg-primary);
      border-radius: var(--toast-radius);
      box-shadow: var(--elevation-3);
      padding: 12px 16px;
      display: flex;
      gap: 12px;
      animation: slideInRight 0.3s ease-out;
      border-left: 4px solid var(--accent);
    }
    @keyframes slideInRight {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    .toast-icon {
      width: 24px;
      height: 24px;
      flex-shrink: 0;
    }
    .toast-content {
      flex: 1;
    }
    .toast-title {
      font-weight: 500;
      margin-bottom: 4px;
    }
    .toast-message {
      font-size: 0.9rem;
      color: var(--text-secondary);
      margin-bottom: 8px;
    }
    .toast-actions {
      display: flex;
      gap: 8px;
    }
    .toast-btn {
      padding: 4px 8px;
      background-color: var(--bg-tertiary);
      border: none;
      border-radius: 4px;
      font-size: 0.85rem;
      cursor: pointer;
    }
    .toast-btn:hover {
      background-color: var(--hover);
    }
    .toast-close {
      background: none;
      border: none;
      font-size: 1.2rem;
      cursor: pointer;
      color: var(--text-tertiary);
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .toast-close:hover {
      color: var(--text-primary);
    }
    /* PWA Install Prompt */
    .install-prompt {
      position: fixed;
      bottom: 20px;
      left: 20px;
      right: 20px;
      background-color: var(--bg-primary);
      border-radius: var(--radius);
      padding: 16px;
      box-shadow: var(--elevation-2);
      display: none;
      z-index: 1000;
      animation: slideUp 0.3s ease-out;
    }
    @keyframes slideUp {
      from { transform: translateY(100%); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    .install-prompt-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 16px;
    }
    .install-prompt-text {
      flex: 1;
    }
    .install-prompt-actions {
      display: flex;
      gap: 8px;
    }
    /* Loading spinner */
    .loading-spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid #f3f3f3;
      border-top: 2px solid var(--accent);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    /* Text-to-Speech Controls */
    .tts-controls {
      display: none;
      margin-top: 8px;
      padding: 8px;
      background-color: var(--bg-tertiary);
      border-radius: 6px;
      display: flex;
      gap: 8px;
    }
    .tts-btn {
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.9rem;
    }
    .tts-btn:hover {
      background-color: var(--hover);
    }
    /* Responsive */
    @media (max-width: 768px) {
      .container {
        flex-direction: column;
      }
      .sidebar {
        position: fixed;
        height: 100%;
        transform: translateX(-100%);
        z-index: 11;
      }
      .sidebar.active {
        transform: translateX(0);
      }
      .overlay.active {
        display: block;
      }
      .welcome-title {
        font-size: 1.5rem;
      }
      .welcome-subtitle {
        font-size: 1rem;
      }
      .chat-area {
        padding: 16px;
      }
      .message {
        max-width: 90%;
      }
      .modal, .search-modal {
        width: 95%;
        max-width: none;
      }
    }
    @keyframes bounce {
      0%, 80%, 100% { transform: scale(0); }
      40% { transform: scale(1.0); }
    }
  </style>
</head>
<body>
  <a href="#main-content" class="skip-link">Skip to main content</a>
  <div class="container">
    <!-- Sidebar -->
    <aside class="sidebar" id="sidebar">
      <div class="sidebar-header">
        <div class="logo">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"/>
          </svg>
        </div>
        <div>
          <h1 class="app-title">Milli Ai</h1>
          <div class="school-info">MKPS Balrampur</div>
        </div>
      </div>
      <button class="new-chat-btn" id="newChatBtn">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="12" y1="5" x2="12" y2="19"></line>
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
        New Chat
      </button>
      <input type="text" class="chats-search" id="chatsSearch" placeholder="Search chats..." />
      <div class="chats-list" id="chatsList"></div>
    </aside>
    <!-- Main -->
    <main class="main">
      <!-- Header -->
      <header class="header">
        <div class="header-left">
          <button class="menu-toggle" id="menuToggle">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="3" y1="12" x2="21" y2="12"></line>
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
          </button>
        </div>
        <div class="header-right">
          <button class="search-btn" id="searchBtn" title="Search (Ctrl+K)">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="11" cy="11" r="8"></circle>
              <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
          </button>
          <button class="notifications-btn" id="notificationsBtn" title="Notifications">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
              <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
            </svg>
          </button>
          <button class="theme-toggle" id="themeToggle" title="Toggle theme">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="5"></circle>
              <line x1="12" y1="1" x2="12" y2="3"></line>
              <line x1="12" y1="21" x2="12" y2="23"></line>
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
              <line x1="1" y1="12" x2="3" y2="12"></line>
              <line x1="21" y1="12" x2="23" y2="12"></line>
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
            </svg>
          </button>
          <button class="lang-toggle" id="langToggle">EN</button>
          <button class="settings-btn" id="settingsBtn" title="Settings">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="3"></circle>
              <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 1.41 1.41 1.65 1.65 0 0 0 1.82.33 1.65 1.65 0 0 0 1.32-1.32 1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1-1.41-1.41 1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1.32 1.32 1.65 1.65 0 0 0 .33 1.82l-.06-.06a2 2 0 0 1-1.41-1.41 1.65 1.65 0 0 0-1.82-.33A1.65 1.65 0 0 0 2 19.4a1.65 1.65 0 0 0 1.32-1.32 1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 1.41-1.41 1.65 1.65 0 0 0 1.82-.33 1.65 1.65 0 0 0 1.32-1.32 1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 1.41-1.41 1.65 1.65 0 0 0 1.82-.33 1.65 1.65 0 0 0 1.32-1.32 1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 1.41-1.41 1.65 1.65 0 0 0 1.82-.33 1.65 1.65 0 0 0 1.32-1.32 1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 1.41-1.41 1.65 1.65 0 0 0 1.82-.33 1.65 1.65 0 0 0 1.32-1.32 1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 1.41-1.41 1.65 1.65 0 0 0 1.82-.33 1.65 1.65 0 0 0 1.32-1.32z"></path>
            </svg>
          </button>
        </div>
      </header>
      <!-- Chat Area -->
      <div class="chat-area" id="chatArea" aria-live="polite" tabindex="0">
        <div class="welcome-container">
          <div class="welcome-logo">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"/>
            </svg>
          </div>
          <h2 class="welcome-title">Welcome to Milli Ai</h2>
          <p class="welcome-subtitle">Your intelligent AI assistant for Milli Karwaan Public School (MKPS), Balrampur. Ask me anything about school, and I'll help you learn and grow.</p>
          <div class="welcome-actions">
            <button class="welcome-btn" id="startChatBtn">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              Start New Chat
            </button>
          </div>
        </div>
      </div>
      <!-- Composer -->
      <div class="composer">
        <div class="error-banner" id="errorBanner"></div>
        <div class="composer-top">
          <div style="display: flex; gap: 8px;">
            <button class="upload-btn" id="uploadBtn" title="Upload Image">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                <circle cx="8.5" cy="8.5" r="1.5"></circle>
                <polyline points="21 15 16 10 5 21"></polyline>
              </svg>
            </button>
            <button class="mic-btn" id="micBtn" title="Voice Input">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
                <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
                <line x1="12" y1="19" x2="12" y2="23"></line>
                <line x1="8" y1="23" x2="16" y2="23"></line>
              </svg>
            </button>
            <button class="tts-btn" id="ttsBtn" title="Text-to-Speech">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
                <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
                <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
              </svg>
            </button>
          </div>
          <div class="send-controls">
            <button class="stop-btn" id="stopBtn" style="display: none;">Stop</button>
            <button class="send-btn" id="sendBtn">Send</button>
          </div>
        </div>
        <textarea class="composer-textarea" id="composer" placeholder="Ask me anything about school..." rows="1"></textarea>
        <input type="file" id="fileInput" accept="image/*,.pdf,.doc,.docx" style="display: none;" />
        <div class="token-counter" id="tokenCounter">0 tokens</div>
        <div class="suggestions-container" id="suggestionsContainer"></div>
      </div>
    </main>
  </div>
  <!-- Overlay -->
  <div class="overlay" id="overlay"></div>
  <!-- Settings Modal -->
  <div class="modal" id="settingsModal">
    <div class="modal-header">
      <h2 class="modal-title">Settings</h2>
      <button class="modal-close" id="closeSettings">&times;</button>
    </div>
    <div class="modal-body">
      <div class="form-group">
        <label for="defaultTheme">Theme</label>
        <select id="defaultTheme">
          <option value="system">System</option>
          <option value="light">Light</option>
          <option value="dark">Dark</option>
        </select>
      </div>
      <div class="form-group">
        <label for="defaultLang">Language</label>
        <select id="defaultLang">
          <option value="en">English</option>
          <option value="hi">हिन्दी</option>
        </select>
      </div>
      <div class="form-group">
        <label for="ttsEnabled">Text-to-Speech</label>
        <select id="ttsEnabled">
          <option value="true">Enabled</option>
          <option value="false">Disabled</option>
        </select>
      </div>
      <div class="form-group">
        <label for="notificationSound">Notification Sound</label>
        <select id="notificationSound">
          <option value="true">Enabled</option>
          <option value="false">Disabled</option>
        </select>
      </div>
      <div class="form-group">
        <label for="schoolInfo">About MKPS Balrampur</label>
        <textarea id="schoolInfo" readonly>Mili Karwaan Public School (MKPS)
Boluha Police Chowki, Balrampur
Phone: +91 9758919151
Established to provide quality education in the community.</textarea>
      </div>
      <div class="btn-group">
        <button class="btn btn-danger" id="resetApp">Reset App</button>
        <button class="btn btn-secondary" id="cancelSettings">Cancel</button>
        <button class="btn btn-primary" id="saveSettings">Save</button>
      </div>
      <div class="error-banner" id="settingsError" style="margin-top: 16px;"></div>
    </div>
  </div>
  <!-- Notifications Modal -->
  <div class="modal" id="notificationsModal">
    <div class="modal-header">
      <h2 class="modal-title">Notifications</h2>
      <button class="modal-close" id="closeNotifications">&times;</button>
    </div>
    <div class="modal-body">
      <div id="notificationsList">
        <div class="welcome-container">
          <p>No notifications yet. Check back later for updates from school.</p>
        </div>
      </div>
    </div>
  </div>
  <!-- Search Modal -->
  <div class="search-modal" id="searchModal">
    <div class="search-box">
      <input type="text" class="search-input" id="globalSearch" placeholder="Search messages..." />
    </div>
    <div class="search-results" id="searchResults"></div>
    <div class="search-actions">
      <button class="btn btn-secondary" id="closeSearch">Close</button>
    </div>
  </div>
  <!-- Toast Container -->
  <div class="toast-container" id="toastContainer"></div>
  <!-- PWA Install Prompt -->
  <div class="install-prompt" id="installPrompt">
    <div class="install-prompt-content">
      <div class="install-prompt-text">
        <div><strong>Install Milli Ai</strong></div>
        <div>Add to your home screen for quick access</div>
      </div>
      <div class="install-prompt-actions">
        <button class="btn btn-secondary" id="installCancel">Not Now</button>
        <button class="btn btn-primary" id="installAccept">Install</button>
      </div>
    </div>
  </div>
  <script>
    // i18n dictionary
    const i18n = {
      en: {
        appName: 'Milli Ai',
        newChat: 'New Chat',
        searchChats: 'Search chats...',
        search: 'Search',
        toggleTheme: 'Toggle theme',
        settings: 'Settings',
        placeholder: 'Ask me anything about school...',
        send: 'Send',
        stop: 'Stop',
        uploadImage: 'Upload Image',
        voiceInput: 'Voice Input',
        tts: 'Text-to-Speech',
        errorMissingKey: 'API key is required. Please enter your key in Settings.',
        tryAgain: 'Try Again',
        debugResponse: 'Show raw response',
        settingsTitle: 'Settings',
        defaultRole: 'Default Role',
        theme: 'Theme',
        language: 'Language',
        resetApp: 'Reset App',
        cancel: 'Cancel',
        save: 'Save',
        globalSearch: 'Search messages...',
        close: 'Close',
        confirmDelete: 'Are you sure you want to delete this message?',
        confirmReset: 'Are you sure you want to reset the app? All data will be lost.',
        appReset: 'App has been reset.',
        networkError: 'Network error. Please check your connection.',
        apiError: 'Error from AI service: ',
        processing: 'Processing your request...',
        streaming: 'Streaming response...',
        voiceStart: 'Listening...',
        voiceEnd: 'Click to speak',
        voiceError: 'Voice recognition error',
        schoolInfo: 'Milli Ai is developed for Mili Karwaan Public School Balrampur, Dev by Abutalha,  Contact: 9758919151',
        deleteChat: 'Delete Chat',
        renameChat: 'Rename Chat',
        pinChat: 'Pin Chat',
        unpinChat: 'Unpin Chat',
        chatDeleted: 'Chat deleted successfully',
        chatRenamed: 'Chat renamed successfully',
        notifications: 'Notifications',
        noNotifications: 'No notifications yet',
        notification: 'Notification',
        fromSchool: 'From School Records',
        availableFrom: 'This information will be available from {startTime}.',
        expiredOn: 'This information expired on {endTime}.',
        recordsNotAvailable: 'School records me available nahi hai.',
        homeworkClass: 'किस क्लास के लिए?',
        suggestions: {
          homework: 'Homework for today?',
          fees: 'Current fees status?',
          timetable: 'Today\'s timetable?',
          holidays: 'Upcoming holidays?',
          results: 'Latest exam results?'
        },
        tts: {
          play: 'Play',
          pause: 'Pause',
          stop: 'Stop'
        },
        install: {
          title: 'Install Milli Ai',
          message: 'Add to your home screen for quick access',
          accept: 'Install',
          cancel: 'Not Now'
        },
        export: {
          title: 'Export Chat',
          format: 'Format',
          pdf: 'PDF',
          txt: 'Text',
          includeImages: 'Include images',
          includeSystem: 'Include system messages',
          export: 'Export',
          cancel: 'Cancel',
          success: 'Chat exported successfully!'
        }
      },
      hi: {
        appName: 'मिली एआई',
        newChat: 'नया चैट',
        searchChats: 'चैट खोजें...',
        search: 'खोज',
        toggleTheme: 'थीम बदलें',
        settings: 'सेटिंग्स',
        placeholder: 'स्कूल के बारे में कुछ भी पूछें...',
        send: 'भेजें',
        stop: 'रोकें',
        uploadImage: 'छवि अपलोड करें',
        voiceInput: 'ध्वनि इनपुट',
        tts: 'टेक्स्ट-टू-स्पीच',
        errorMissingKey: 'API कुंजी आवश्यक है। कृपया सेटिंग्स में अपनी कुंजी दर्ज करें।',
        tryAgain: 'फिर से कोशिश करें',
        debugResponse: 'कच्चा प्रतिक्रिया दिखाएं',
        settingsTitle: 'सेटिंग्स',
        defaultRole: 'डिफ़ॉल्ट भूमिका',
        theme: 'थीम',
        language: 'भाषा',
        resetApp: 'ऐप रीसेट करें',
        cancel: 'रद्द करें',
        save: 'सहेजें',
        globalSearch: 'संदेश खोजें...',
        close: 'बंद करें',
        confirmDelete: 'क्या आप वाकई इस संदेश को हटाना चाहते हैं?',
        confirmReset: 'क्या आप वाकई ऐप को रीसेट करना चाहते हैं? सभी डेटा खो जाएगा।',
        appReset: 'ऐप रीसेट कर दिया गया है।',
        networkError: 'नेटवर्क त्रुटि। कृपया अपने कनेक्शन की जांच करें।',
        apiError: 'AI सेवा से त्रुटि: ',
        processing: 'आपका अनुरोध प्रसंस्करण किया जा रहा है...',
        streaming: 'प्रतिक्रिया प्रस्तुत की जा रही है...',
        voiceStart: 'सुन रहा है...',
        voiceEnd: 'बोलने के लिए क्लिक करें',
        voiceError: 'ध्वनि पहचान त्रुटि',
        schoolInfo: 'मिली एआई मिली करवां पब्लिक स्कूल, बलरामपुर के लिए विकसित किया गया है। संपर्क: 9758919151',
        deleteChat: 'चैट हटाएं',
        renameChat: 'चैट नाम बदलें',
        pinChat: 'चैट पिन करें',
        unpinChat: 'चैट अनपिन करें',
        chatDeleted: 'चैट सफलतापूर्वक हटा दी गई',
        chatRenamed: 'चैट का नाम सफलतापूर्वक बदल दिया गया',
        notifications: 'सूचनाएं',
        noNotifications: 'अभी कोई सूचना नहीं है',
        notification: 'सूचना',
        fromSchool: 'स्कूल रिकॉर्ड्स से',
        availableFrom: 'यह जानकारी {startTime} से उपलब्ध होगी।',
        expiredOn: 'यह जानकारी {endTime} को समाप्त हो गई।',
        recordsNotAvailable: 'स्कूल रिकॉर्ड्स में उपलब्ध नहीं है।',
        homeworkClass: 'किस कक्षा के लिए?',
        suggestions: {
          homework: 'आज के लिए होमवर्क?',
          fees: 'वर्तमान फीस स्थिति?',
          timetable: 'आज का समय सारणी?',
          holidays: 'आने वाले छुट्टियां?',
          results: 'नवीनतम परीक्षा परिणाम?'
        },
        tts: {
          play: 'चलाएं',
          pause: 'रोकें',
          stop: 'रोकें'
        },
        install: {
          title: 'मिली एआई इंस्टॉल करें',
          message: 'त्वरित पहुंच के लिए अपने होम स्क्रीन पर जोड़ें',
          accept: 'इंस्टॉल',
          cancel: 'अभी नहीं'
        },
        export: {
          title: 'चैट निर्यात करें',
          format: 'प्रारूप',
          pdf: 'पीडीएफ',
          txt: 'पाठ',
          includeImages: 'छवियां शामिल करें',
          includeSystem: 'सिस्टम संदेश शामिल करें',
          export: 'निर्यात',
          cancel: 'रद्द करें',
          success: 'चैट सफलतापूर्वक निर्यात की गई!'
        }
      }
    };
    
    // Firebase configuration
    const firebaseConfig = {
      apiKey: "AIzaSyB0fHtqeoerlckQ2RXx_VC86cZz_BJaIIU",
      authDomain: "mkps-balrampur.firebaseapp.com",
      projectId: "mkps-balrampur",
      storageBucket: "mkps-balrampur.firebasestorage.app",
      messagingSenderId: "469227187804",
      appId: "1:469227187804:web:8abdb9b75ed05b7eadc099",
      measurementId: "G-TYKBNS9SX2"
    };
    
    // Gemini API configuration
    const GEMINI_API_KEY = "AIzaSyB4xCisV5WXwLKpBgh75ZWk1JaZdMptoQs";
    
    // App state
    let state = {
      chats: [],
      currentChatId: null,
      activeChat: null,
      defaultRole: 'general',
      theme: 'system',
      language: 'en',
      abortController: null,
      apiKey: 'AIzaSyBMqHxkw8bo6iClp5cNukEgEFKwnqpQp7c',
      isListening: false,
      recognition: null,
      notifications: [],
      unreadNotifications: 0,
      ttsEnabled: true,
      notificationSound: true,
      installPrompt: null,
      indexedDB: null,
      dbVersion: 1,
      collections: ['chats', 'notifications', 'settings', 'cache']
    };
    
    // DOM elements
    const elements = {
      sidebar: document.getElementById('sidebar'),
      overlay: document.getElementById('overlay'),
      menuToggle: document.getElementById('menuToggle'),
      newChatBtn: document.getElementById('newChatBtn'),
      startChatBtn: document.getElementById('startChatBtn'),
      chatsSearch: document.getElementById('chatsSearch'),
      chatsList: document.getElementById('chatsList'),
      searchBtn: document.getElementById('searchBtn'),
      themeToggle: document.getElementById('themeToggle'),
      langToggle: document.getElementById('langToggle'),
      settingsBtn: document.getElementById('settingsBtn'),
      notificationsBtn: document.getElementById('notificationsBtn'),
      chatArea: document.getElementById('chatArea'),
      composer: document.getElementById('composer'),
      fileInput: document.getElementById('fileInput'),
      uploadBtn: document.getElementById('uploadBtn'),
      micBtn: document.getElementById('micBtn'),
      ttsBtn: document.getElementById('ttsBtn'),
      sendBtn: document.getElementById('sendBtn'),
      stopBtn: document.getElementById('stopBtn'),
      tokenCounter: document.getElementById('tokenCounter'),
      errorBanner: document.getElementById('errorBanner'),
      settingsModal: document.getElementById('settingsModal'),
      closeSettings: document.getElementById('closeSettings'),
      cancelSettings: document.getElementById('cancelSettings'),
      saveSettings: document.getElementById('saveSettings'),
      defaultThemeSelect: document.getElementById('defaultTheme'),
      defaultLangSelect: document.getElementById('defaultLang'),
      ttsEnabledSelect: document.getElementById('ttsEnabled'),
      notificationSoundSelect: document.getElementById('notificationSound'),
      schoolInfoTextarea: document.getElementById('schoolInfo'),
      settingsError: document.getElementById('settingsError'),
      resetAppBtn: document.getElementById('resetApp'),
      searchModal: document.getElementById('searchModal'),
      globalSearch: document.getElementById('globalSearch'),
      searchResults: document.getElementById('searchResults'),
      closeSearch: document.getElementById('closeSearch'),
      notificationsModal: document.getElementById('notificationsModal'),
      closeNotifications: document.getElementById('closeNotifications'),
      notificationsList: document.getElementById('notificationsList'),
      toastContainer: document.getElementById('toastContainer'),
      installPrompt: document.getElementById('installPrompt'),
      installCancel: document.getElementById('installCancel'),
      installAccept: document.getElementById('installAccept'),
      suggestionsContainer: document.getElementById('suggestionsContainer')
    };
    
    // IndexedDB helper
    class IndexedDBHelper {
      constructor() {
        this.db = null;
        this.dbName = 'MilliAiDB';
        this.version = 1;
      }
      
      async open() {
        return new Promise((resolve, reject) => {
          const request = indexedDB.open(this.dbName, this.version);
          
          request.onerror = () => reject(request.error);
          request.onsuccess = () => {
            this.db = request.result;
            resolve(this.db);
          };
          
          request.onupgradeneeded = (event) => {
            const db = event.target.result;
            
            // Create object stores
            if (!db.objectStoreNames.contains('chats')) {
              const chatStore = db.createObjectStore('chats', { keyPath: 'id' });
              chatStore.createIndex('updatedAt', 'updatedAt', { unique: false });
              chatStore.createIndex('pinned', 'pinned', { unique: false });
            }
            
            if (!db.objectStoreNames.contains('notifications')) {
              const notifStore = db.createObjectStore('notifications', { keyPath: 'id' });
              notifStore.createIndex('timestamp', 'timestamp', { unique: false });
              notifStore.createIndex('read', 'read', { unique: false });
            }
            
            if (!db.objectStoreNames.contains('settings')) {
              db.createObjectStore('settings', { keyPath: 'key' });
            }
            
            if (!db.objectStoreNames.contains('cache')) {
              const cacheStore = db.createObjectStore('cache', { keyPath: 'key' });
              cacheStore.createIndex('expires', 'expires', { unique: false });
            }
          };
        });
      }
      
      async get(storeName, key) {
        if (!this.db) await this.open();
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([storeName], 'readonly');
          const store = transaction.objectStore(storeName);
          const request = store.get(key);
          
          request.onsuccess = () => resolve(request.result);
          request.onerror = () => reject(request.error);
        });
      }
      
      async getAll(storeName) {
        if (!this.db) await this.open();
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([storeName], 'readonly');
          const store = transaction.objectStore(storeName);
          const request = store.getAll();
          
          request.onsuccess = () => resolve(request.result);
          request.onerror = () => reject(request.error);
        });
      }
      
      async put(storeName, data) {
        if (!this.db) await this.open();
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([storeName], 'readwrite');
          const store = transaction.objectStore(storeName);
          const request = store.put(data);
          
          request.onsuccess = () => resolve(request.result);
          request.onerror = () => reject(request.error);
        });
      }
      
      async delete(storeName, key) {
        if (!this.db) await this.open();
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([storeName], 'readwrite');
          const store = transaction.objectStore(storeName);
          const request = store.delete(key);
          
          request.onsuccess = () => resolve(request.result);
          request.onerror = () => reject(request.error);
        });
      }
      
      async clear(storeName) {
        if (!this.db) await this.open();
        return new Promise((resolve, reject) => {
          const transaction = this.db.transaction([storeName], 'readwrite');
          const store = transaction.objectStore(storeName);
          const request = store.clear();
          
          request.onsuccess = () => resolve(request.result);
          request.onerror = () => reject(request.error);
        });
      }
    }
    
    // Initialize IndexedDB
    const db = new IndexedDBHelper();
    
    // Utility functions
    function t(key) {
      const keys = key.split('.');
      let value = i18n[state.language];
      for (const k of keys) {
        if (value && typeof value === 'object') {
          value = value[k];
        } else {
          break;
        }
      }
      return value || key;
    }
    
    function updateTexts() {
      document.title = t('appName');
      document.querySelector('.app-title').textContent = t('appName');
      elements.newChatBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="12" y1="5" x2="12" y2="19"></line>
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
        ${t('newChat')}`;
      if (elements.startChatBtn) {
        elements.startChatBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="12" y1="5" x2="12" y2="19"></line>
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
        ${t('newChat')}`;
      }
      elements.chatsSearch.placeholder = t('searchChats');
      elements.searchBtn.title = t('search');
      elements.themeToggle.title = t('toggleTheme');
      elements.settingsBtn.title = t('settings');
      elements.notificationsBtn.title = t('notifications');
      elements.composer.placeholder = t('placeholder');
      elements.sendBtn.textContent = t('send');
      elements.stopBtn.textContent = t('stop');
      elements.uploadBtn.title = t('uploadImage');
      elements.micBtn.title = t('voiceInput');
      elements.ttsBtn.title = t('tts');
      document.querySelector('#settingsModal .modal-title').textContent = t('settingsTitle');
      document.querySelector('label[for="defaultTheme"]').textContent = t('theme');
      document.querySelector('label[for="defaultLang"]').textContent = t('language');
      document.querySelector('label[for="ttsEnabled"]').textContent = t('tts');
      document.querySelector('label[for="notificationSound"]').textContent = t('notificationSound');
      document.querySelector('label[for="schoolInfo"]').textContent = t('aboutMKPS');
      elements.resetAppBtn.textContent = t('resetApp');
      elements.cancelSettings.textContent = t('cancel');
      elements.saveSettings.textContent = t('save');
      elements.globalSearch.placeholder = t('globalSearch');
      elements.closeSearch.textContent = t('close');
      elements.closeNotifications.textContent = t('close');
      document.querySelector('#notificationsModal .modal-title').textContent = t('notifications');
      
      // Update suggestion chips if they exist
      updateSuggestions();
    }
    
    function showToast(message, type = 'info', duration = 3000) {
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.innerHTML = `
        <div class="toast-icon">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="${type === 'error' ? '#d93025' : type === 'success' ? '#34a853' : '#1a73e8'}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            ${type === 'error' ? 
              '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line>' :
              type === 'success' ?
              '<path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline>' :
              '<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line>'}
          </svg>
        </div>
        <div class="toast-content">
          <div class="toast-title">${type === 'error' ? 'Error' : type === 'success' ? 'Success' : 'Notification'}</div>
          <div class="toast-message">${message}</div>
        </div>
        <button class="toast-close">&times;</button>
      `;
      
      toast.querySelector('.toast-close').addEventListener('click', () => {
        toast.remove();
      });
      
      elements.toastContainer.appendChild(toast);
      
      // Auto-remove after duration
      setTimeout(() => {
        if (toast.parentNode) {
          toast.remove();
        }
      }, duration);
      
      return toast;
    }
    
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
    
    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    
    function formatDate(dateStr) {
      const date = new Date(dateStr);
      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }
    
    function formatDateTime(dateStr) {
      const date = new Date(dateStr);
      return date.toLocaleDateString('en-IN', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    
    function estimateTokens(text) {
      return Math.ceil(text.length / 4);
    }
    
    function sanitizeText(text) {
      const div = document.createElement('div');
      div.textContent = text;
      let escaped = div.innerHTML;
      // Handle code blocks
      escaped = escaped.replace(/```(\w+)?\s*([\s\S]*?)```/g, '<pre><code class="$1">$2</code></pre>');
      escaped = escaped.replace(/`([^`]+)`/g, '<code>$1</code>');
      // Handle bold and italic
      escaped = escaped.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      escaped = escaped.replace(/\*(.*?)\*/g, '<em>$1</em>');
      // Handle lists
      escaped = escaped.replace(/^\s*-\s(.+)$/gm, '<li>$1</li>');
      escaped = escaped.replace(/^\s*\d+\.\s(.+)$/gm, '<li>$1</li>');
      escaped = escaped.replace(/(<li>.*<\/li>)+/g, '<ul>$&</ul>');
      return escaped;
    }
    
    function renderMessageContent(text) {
      const container = document.createElement('div');
      container.className = 'message-content';
      container.innerHTML = sanitizeText(text);
      return container;
    }
    
    function getSystemPrompt() {
      return "You are Milli Ai, the real-time AI assistant of Milli Karwaan Public School (MKPS), Balrampur.\n\nFor school-related queries (fees, timetable, exams, holidays):\n- Always check Firestore /notifications/global/items first.\n- Respect startTime and endTime strictly.\n- If active → reply with content + label: \"From School Records\".\n- If not yet active → say: \"This information will be available from {startTime}.\"\n- If expired → say: \"This information expired on {endTime}.\"\n- If no record → say: \"School records me available nahi hai,\" then provide a helpful AI answer.\n\nFor homework: Never assume class. Always ask: \"किस क्लास के लिए?\"\n\nRespond in Hindi or English based on user input. Be polite, clear, and professional — like a tutor.\n\nNever invent school data. Always verify first.\n\nRemember: You are trusted by students and parents. Be accurate, kind, and helpful.";
    }
    
    // Storage functions
    async function loadState() {
      try {
        // Try to load from IndexedDB first
        const saved = await db.get('settings', 'state');
        if (saved) {
          state = { ...state, ...saved.value };
        } else {
          // Fallback to localStorage
          const savedLocal = localStorage.getItem('milliAi:state');
          if (savedLocal) {
            const parsed = JSON.parse(savedLocal);
            state = { ...state, ...parsed };
            // Save to IndexedDB for future
            await db.put('settings', { key: 'state', value: state });
          }
        }
        applyTheme();
        updateTexts();
        elements.langToggle.textContent = state.language.toUpperCase();
        elements.ttsEnabledSelect.value = state.ttsEnabled.toString();
        elements.notificationSoundSelect.value = state.notificationSound.toString();
      } catch (e) {
        console.error('Failed to load state:', e);
      }
    }
    
    async function saveState() {
      try {
        const { abortController, recognition, ...saveable } = state;
        await db.put('settings', { key: 'state', value: saveable });
        // Also save to localStorage for compatibility
        localStorage.setItem('milliAi:state', JSON.stringify(saveable));
      } catch (e) {
        console.error('Failed to save state:', e);
      }
    }
    
    async function loadChats() {
      try {
        const saved = await db.getAll('chats');
        if (saved && saved.length > 0) {
          state.chats = saved;
          renderChatsList();
        } else {
          // Fallback to localStorage
          const savedLocal = localStorage.getItem('milliAi:chats');
          if (savedLocal) {
            state.chats = JSON.parse(savedLocal);
            // Save to IndexedDB
            for (const chat of state.chats) {
              await db.put('chats', chat);
            }
            renderChatsList();
          }
        }
      } catch (e) {
        console.error('Failed to load chats:', e);
      }
    }
    
    async function saveChats() {
      try {
        for (const chat of state.chats) {
          await db.put('chats', chat);
        }
        // Also save to localStorage for compatibility
        const { abortController, recognition, ...saveable } = state;
        localStorage.setItem('milliAi:chats', JSON.stringify(state.chats));
      } catch (e) {
        console.error('Failed to save chats:', e);
      }
    }
    
    // Chat functions
    function createNewChat() {
      const chat = {
        id: Date.now().toString(),
        title: 'New Chat',
        messages: [],
        pinned: false,
        role: 'general',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      state.chats.unshift(chat);
      state.currentChatId = chat.id;
      state.activeChat = chat;
      saveChats();
      saveState();
      renderChatsList();
      renderChat();
      return chat;
    }
    
    function getChat(id) {
      return state.chats.find(c => c.id === id);
    }
    
    function deleteChat(id) {
      if (confirm(t('confirmDelete'))) {
        state.chats = state.chats.filter(c => c.id !== id);
        if (state.currentChatId === id) {
          if (state.chats.length > 0) {
            state.currentChatId = state.chats[0].id;
            state.activeChat = state.chats[0];
          } else {
            state.currentChatId = null;
            state.activeChat = null;
          }
        }
        saveChats();
        saveState();
        renderChatsList();
        renderChat();
        showToast(t('chatDeleted'), 'success');
      }
    }
    
    function pinChat(id) {
      const chat = getChat(id);
      if (chat) {
        chat.pinned = !chat.pinned;
        chat.updatedAt = new Date().toISOString();
        state.chats.sort((a, b) => {
          if (a.pinned && !b.pinned) return -1;
          if (!a.pinned && b.pinned) return 1;
          return new Date(b.updatedAt) - new Date(a.updatedAt);
        });
        saveChats();
        renderChatsList();
      }
    }
    
    function renameChat(id, title) {
      const chat = getChat(id);
      if (chat && title.trim()) {
        chat.title = title.trim();
        chat.updatedAt = new Date().toISOString();
        saveChats();
        renderChatsList();
        showToast(t('chatRenamed'), 'success');
      }
    }
    
    function autoGenerateChatTitle(chatId, messageContent) {
      const chat = getChat(chatId);
      if (chat && chat.messages.length === 1) {
        // Get first message content
        const content = messageContent || chat.messages[0].content;
        const words = content.trim().split(/\s+/).slice(0, 6);
        const title = words.join(' ') + (words.length === 6 ? '...' : '');
        renameChat(chatId, title);
      }
    }
    
    function filterChats(query) {
      return state.chats.filter(chat => 
        chat.title.toLowerCase().includes(query.toLowerCase()) ||
        chat.messages.some(msg => 
          msg.role === 'user' && 
          msg.content.toLowerCase().includes(query.toLowerCase())
        )
      );
    }
    
    // UI Rendering
    function renderChatsList() {
      const query = elements.chatsSearch.value.trim();
      const filtered = query ? filterChats(query) : [...state.chats];
      filtered.sort((a, b) => {
        if (a.pinned && !b.pinned) return -1;
        if (!a.pinned && b.pinned) return 1;
        return new Date(b.updatedAt) - new Date(a.updatedAt);
      });
      const fragment = document.createDocumentFragment();
      filtered.forEach(chat => {
        const item = document.createElement('div');
        item.className = `chat-item ${chat.id === state.currentChatId ? 'active' : ''} ${chat.pinned ? 'pinned' : ''}`;
        item.dataset.id = chat.id;
        item.innerHTML = `
          <div class="chat-pin">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="12" y1="4" x2="12" y2="20"></line>
              <polyline points="16,8 12,4 8,8"></polyline>
              <line x1="4" y1="16" x2="20" y2="16"></line>
            </svg>
          </div>
          <div class="chat-title">${chat.title}</div>
          <div class="chat-title-edit">
            <input type="text" class="chat-title-input" value="${chat.title}" />
          </div>
          <div class="chat-actions">
            <button class="chat-action-btn pin-toggle" title="${chat.pinned ? t('unpinChat') : t('pinChat')}">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="12" y1="4" x2="12" y2="20"></line>
                <polyline points="16,8 12,4 8,8"></polyline>
                <line x1="4" y1="16" x2="20" y2="16"></line>
              </svg>
            </button>
            <button class="chat-action-btn delete-chat" title="${t('deleteChat')}">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="3,6 5,6 21,6"></polyline>
                <path d="M19,6v14a2,2 0,0 1-2,2H7a2,2 0,0 1-2-2V6m3,0V4a2,2 0,0 1,2-2h4a2,2 0,0 1,2,2v2"></path>
              </svg>
            </button>
          </div>
        `;
        // Pin toggle
        item.querySelector('.pin-toggle').addEventListener('click', (e) => {
          e.stopPropagation();
          pinChat(chat.id);
        });
        // Delete chat
        item.querySelector('.delete-chat').addEventListener('click', (e) => {
          e.stopPropagation();
          deleteChat(chat.id);
        });
        // Chat click
        item.addEventListener('click', () => {
          state.currentChatId = chat.id;
          state.activeChat = chat;
          saveState();
          renderChatsList();
          renderChat();
          closeMobileMenu();
        });
        // Double click to edit title
        item.addEventListener('dblclick', (e) => {
          if (!e.target.closest('.chat-action-btn')) {
            item.classList.add('editing');
            const input = item.querySelector('.chat-title-input');
            input.focus();
            input.select();
            // Remove focus when Enter is pressed or focus is lost
            const onBlur = () => {
              renameChat(chat.id, input.value);
              item.classList.remove('editing');
              input.removeEventListener('blur', onBlur);
              input.removeEventListener('keydown', onKeydown);
            };
            const onKeydown = (e) => {
              if (e.key === 'Enter') {
                onBlur();
              } else if (e.key === 'Escape') {
                item.classList.remove('editing');
                input.removeEventListener('blur', onBlur);
                input.removeEventListener('keydown', onKeydown);
              }
            };
            input.addEventListener('blur', onBlur);
            input.addEventListener('keydown', onKeydown);
          }
        });
        fragment.appendChild(item);
      });
      elements.chatsList.innerHTML = '';
      elements.chatsList.appendChild(fragment);
    }
    
    function renderChat() {
      const chatArea = elements.chatArea;
      chatArea.innerHTML = '';
      if (!state.activeChat || state.activeChat.messages.length === 0) {
        const welcomeContainer = document.createElement('div');
        welcomeContainer.className = 'welcome-container';
        welcomeContainer.innerHTML = `
          <div class="welcome-logo">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"/>
            </svg>
          </div>
          <h2 class="welcome-title">Welcome to Milli Ai</h2>
          <p class="welcome-subtitle">Your intelligent AI assistant for Milli Karwaan Public School (MKPS), Balrampur. Ask me anything about school, and I'll help you learn and grow.</p>
          <div class="welcome-actions">
            <button class="welcome-btn" id="startChatBtnInternal">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              Start New Chat
            </button>
          </div>
        `;
        chatArea.appendChild(welcomeContainer);
        // Add event listener to the internal button
        const startBtn = welcomeContainer.querySelector('#startChatBtnInternal');
        if (startBtn) {
          startBtn.addEventListener('click', createNewChat);
        }
        return;
      }
      state.activeChat.messages.forEach(message => {
        const messageEl = document.createElement('div');
        messageEl.className = `message ${message.role}`;
        messageEl.dataset.id = message.id;
        const header = document.createElement('div');
        header.className = 'message-header';
        header.innerHTML = `
          <span>${message.role === 'user' ? 'You' : message.role === 'system' ? 'System' : 'Milli Ai'}</span>
          <span>${formatDate(message.timestamp)}</span>
        `;
        messageEl.appendChild(header);
        
        if (message.role === 'ai' || message.role === 'system') {
          const toolbar = document.createElement('div');
          toolbar.className = 'message-toolbar';
          let toolbarButtons = `
            <button class="msg-action-btn copy-btn" title="${t('copy')}">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0,0 1-2-2V4a2 2 0,0 1 2-2h9a2 2 0,0 1 2 2v1"></path>
              </svg>
            </button>`;
          
          if (message.role === 'ai') {
            toolbarButtons += `
              <button class="msg-action-btn regenerate-btn" title="${t('regenerate')}">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21.34 15.57a10 10 0 1 1-.57-8.38"></path>
                </svg>
              </button>`;
          }
          
          toolbarButtons += `
            <button class="msg-action-btn delete-btn" title="${t('delete')}">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="3,6 5,6 21,6"></polyline>
                <path d="M19,6v14a2,2 0,0 1-2,2H7a2,2 0,0 1-2-2V6m3,0V4a2,2 0,0 1,2-2h4a2,2 0,0 1,2,2v2"></path>
              </svg>
            </button>`;
          
          toolbar.innerHTML = toolbarButtons;
          messageEl.appendChild(toolbar);
          
          // Copy button
          toolbar.querySelector('.copy-btn').addEventListener('click', () => {
            navigator.clipboard.writeText(message.content).then(() => {
              showToast('Copied to clipboard', 'success', 2000);
            }).catch(err => {
              console.error('Failed to copy: ', err);
              showToast('Failed to copy', 'error', 2000);
            });
          });
          
          // Regenerate button (only for AI messages)
          if (message.role === 'ai') {
            toolbar.querySelector('.regenerate-btn').addEventListener('click', () => {
              regenerateResponse(message.id);
            });
          }
          
          // Delete button
          toolbar.querySelector('.delete-btn').addEventListener('click', () => {
            if (confirm(t('confirmDelete'))) {
              state.activeChat.messages = state.activeChat.messages.filter(m => m.id !== message.id);
              saveChats();
              renderChat();
            }
          });
        }
        
        if (message.content) {
          messageEl.appendChild(renderMessageContent(message.content));
        }
        
        if (message.image) {
          const imgContainer = document.createElement('div');
          imgContainer.className = 'image-preview';
          imgContainer.innerHTML = `<img src="${message.image.dataUrl}" alt="Attached image" />`;
          messageEl.appendChild(imgContainer);
        }
        
        chatArea.appendChild(messageEl);
      });
      chatArea.scrollTop = chatArea.scrollHeight;
    }
    
    function addMessage(role, content, image = null, timestamp = null) {
      if (!state.activeChat) {
        createNewChat();
      }
      const message = {
        id: Date.now().toString(),
        role,
        content,
        timestamp: timestamp || new Date().toISOString(),
        image: image || null
      };
      state.activeChat.messages.push(message);
      state.activeChat.updatedAt = new Date().toISOString();
      saveChats();
      renderChat();
      updateTokenCounter();
      if (role === 'user' && state.activeChat.messages.length === 1) {
        autoGenerateChatTitle(state.activeChat.id, content);
      }
      return message;
    }
    
    function updateTokenCounter() {
      if (!state.activeChat) {
        elements.tokenCounter.textContent = '0 tokens';
        return;
      }
      const text = state.activeChat.messages.map(m => m.content).join(' ');
      const tokens = estimateTokens(text);
      elements.tokenCounter.textContent = `${tokens} tokens`;
    }
    
    // Firestore-like functions (simulated for demo)
    async function getFirestoreData(collection, docId = null) {
      // Simulate Firestore data
      const mockData = {
        notifications: {
          'global': {
            items: [
              {
                id: 'notif1',
                category: 'holiday',
                title: 'Diwali Holiday',
                message: 'School will remain closed on 12th November 2023 for Diwali celebration.',
                startTime: '2023-11-12T00:00:00',
                endTime: '2023-11-12T23:59:59',
                timestamp: '2023-11-10T10:00:00'
              },
              {
                id: 'notif2',
                category: 'exam',
                title: 'Half Yearly Exams',
                message: 'Half yearly exams will be conducted from 15th to 20th November 2023.',
                startTime: '2023-11-15T00:00:00',
                endTime: '2023-11-20T23:59:59',
                timestamp: '2023-11-10T09:00:00'
              },
              {
                id: 'notif3',
                category: 'fees',
                title: 'Fees Reminder',
                message: 'Please pay your quarterly fees by 25th November 2023 to avoid late charges.',
                startTime: '2023-11-01T00:00:00',
                endTime: '2023-11-25T23:59:59',
                timestamp: '2023-11-01T08:00:00'
              }
            ]
          }
        },
        timetable: {
          'class1': {
            monday: ['Hindi 9-10', 'Maths 10-11', 'English 11-12'],
            tuesday: ['Maths 9-10', 'Hindi 10-11', 'EVS 11-12'],
            wednesday: ['English 9-10', 'Maths 10-11', 'Hindi 11-12'],
            thursday: ['Hindi 9-10', 'EVS 10-11', 'Maths 11-12'],
            friday: ['Maths 9-10', 'English 10-11', 'Hindi 11-12']
          },
          'class2': {
            monday: ['Hindi 9-10', 'Maths 10-11', 'English 11-12'],
            tuesday: ['Maths 9-10', 'Hindi 10-11', 'EVS 11-12'],
            wednesday: ['English 9-10', 'Maths 10-11', 'Hindi 11-12'],
            thursday: ['Hindi 9-10', 'EVS 10-11', 'Maths 11-12'],
            friday: ['Maths 9-10', 'English 10-11', 'Hindi 11-12']
          }
        },
        fees: {
          'student123': {
            status: 'paid',
            amount: 2500,
            dueDate: '2023-11-25',
            lastPayment: '2023-11-01'
          }
        },
        homework: {
          'class1': {
            '2023-11-15': 'Complete exercise 5 in Maths textbook page 45.',
            '2023-11-16': 'Write 10 sentences in English using present tense.'
          },
          'class2': {
            '2023-11-15': 'Solve addition problems 1-20 in Maths workbook.',
            '2023-11-16': 'Draw a picture of your family and write 5 sentences about it.'
          }
        },
        results: {
          'student123': {
            halfYearly: {
              hindi: 85,
              maths: 92,
              english: 78,
              evs: 88,
              total: 343,
              percentage: 85.75,
              grade: 'A'
            }
          }
        },
        attendance: {
          'student123': {
            totalDays: 100,
            present: 95,
            absent: 5,
            percentage: 95
          }
        },
        events: {
          'sportsDay': {
            title: 'Annual Sports Day',
            date: '2023-12-15',
            time: '10:00',
            venue: 'School Ground',
            description: 'Annual sports day with various events for all classes.'
          }
        },
        circulars: {
          'uniform': {
            title: 'Uniform Change',
            date: '2023-11-01',
            content: 'New school uniform will be implemented from 1st December 2023.'
          }
        },
        vacations: {
          'winter': {
            title: 'Winter Break',
            startDate: '2023-12-20',
            endDate: '2024-01-05',
            description: 'School closed for winter vacation.'
          }
        }
      };
      
      if (docId) {
        return mockData[collection]?.[docId] || null;
      }
      return mockData[collection] || null;
    }
    
    // Check if a notification is currently active
    function isNotificationActive(notification) {
      const now = new Date();
      const start = new Date(notification.startTime);
      const end = new Date(notification.endTime);
      return now >= start && now <= end;
    }
    
    // Check if a notification is in the future
    function isNotificationFuture(notification) {
      const now = new Date();
      const start = new Date(notification.startTime);
      return now < start;
    }
    
    // Check if a notification is expired
    function isNotificationExpired(notification) {
      const now = new Date();
      const end = new Date(notification.endTime);
      return now > end;
    }
    
    // Process school-related queries
    async function processSchoolQuery(query, userMessageId) {
      // Normalize query
      const lowerQuery = query.toLowerCase();
      
      // Check notifications first
      const notifications = await getFirestoreData('notifications', 'global');
      if (notifications?.items) {
        // Look for relevant notifications
        for (const notification of notifications.items) {
          if (lowerQuery.includes(notification.category.toLowerCase()) || 
              lowerQuery.includes(notification.title.toLowerCase()) ||
              lowerQuery.includes('holiday') && notification.category === 'holiday' ||
              lowerQuery.includes('exam') && notification.category === 'exam' ||
              lowerQuery.includes('fees') && notification.category === 'fees') {
            
            if (isNotificationActive(notification)) {
              // Active notification - show it
              const response = `${notification.message}\n\n*${t('fromSchool')}*`;
              addMessage('ai', response, null, new Date().toISOString());
              return true;
            } else if (isNotificationFuture(notification)) {
              // Future notification
              const formattedTime = formatDateTime(notification.startTime);
              const response = t('availableFrom').replace('{startTime}', formattedTime);
              addMessage('ai', response, null, new Date().toISOString());
              return true;
            } else if (isNotificationExpired(notification)) {
              // Expired notification
              const formattedTime = formatDateTime(notification.endTime);
              const response = t('expiredOn').replace('{endTime}', formattedTime);
              addMessage('ai', response, null, new Date().toISOString());
              return true;
            }
          }
        }
      }
      
      // Check other school data
      if (lowerQuery.includes('timetable') || lowerQuery.includes('schedule')) {
        // Need to know which class
        if (lowerQuery.includes('class') || lowerQuery.includes('कक्षा')) {
          // Extract class from query
          const classMatch = lowerQuery.match(/class\s+(\d+)/i) || lowerQuery.match(/कक्षा\s*(\d+)/);
          if (classMatch) {
            const classNum = classMatch[1];
            const timetable = await getFirestoreData('timetable', `class${classNum}`);
            if (timetable) {
              const day = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
              const schedule = timetable[day] || ['No classes today'];
              const response = `Timetable for Class ${classNum} (${capitalize(day)}):\n\n${schedule.join('\n')}\n\n*${t('fromSchool')}*`;
              addMessage('ai', response, null, new Date().toISOString());
              return true;
            }
          }
        }
        // Don't know class - ask
        addMessage('ai', t('homeworkClass'), null, new Date().toISOString());
        return true;
      }
      
      if (lowerQuery.includes('homework') || lowerQuery.includes('assignment')) {
        // Need to know which class
        if (lowerQuery.includes('class') || lowerQuery.includes('कक्षा')) {
          // Extract class from query
          const classMatch = lowerQuery.match(/class\s+(\d+)/i) || lowerQuery.match(/कक्षा\s*(\d+)/);
          if (classMatch) {
            const classNum = classMatch[1];
            const homework = await getFirestoreData('homework', `class${classNum}`);
            if (homework) {
              const today = new Date().toISOString().split('T')[0];
              const todayHomework = homework[today] || 'No homework assigned for today.';
              const response = `Homework for Class ${classNum} (${today}):\n\n${todayHomework}\n\n*${t('fromSchool')}*`;
              addMessage('ai', response, null, new Date().toISOString());
              return true;
            }
          }
        }
        // Don't know class - ask
        addMessage('ai', t('homeworkClass'), null, new Date().toISOString());
        return true;
      }
      
      if (lowerQuery.includes('fees') || lowerQuery.includes('fee')) {
        // This would normally require student ID, but for demo we'll use a mock
        const fees = await getFirestoreData('fees', 'student123');
        if (fees) {
          const dueDate = new Date(fees.dueDate).toLocaleDateString();
          const lastPayment = new Date(fees.lastPayment).toLocaleDateString();
          const response = `Fees Status:\n\nStatus: ${fees.status.toUpperCase()}\nAmount: ₹${fees.amount}\nDue Date: ${dueDate}\nLast Payment: ${lastPayment}\n\n*${t('fromSchool')}*`;
          addMessage('ai', response, null, new Date().toISOString());
          return true;
        }
      }
      
      if (lowerQuery.includes('result') || lowerQuery.includes('marks') || lowerQuery.includes('grade')) {
        // Mock student data
        const results = await getFirestoreData('results', 'student123');
        if (results?.halfYearly) {
          const r = results.halfYearly;
          const response = `Half Yearly Exam Results:\n\nHindi: ${r.hindi}/100\nMaths: ${r.maths}/100\nEnglish: ${r.english}/100\nEVS: ${r.evs}/100\n\nTotal: ${r.total}/400\nPercentage: ${r.percentage}%\nGrade: ${r.grade}\n\n*${t('fromSchool')}*`;
          addMessage('ai', response, null, new Date().toISOString());
          return true;
        }
      }
      
      if (lowerQuery.includes('attendance') || lowerQuery.includes('present')) {
        const attendance = await getFirestoreData('attendance', 'student123');
        if (attendance) {
          const response = `Attendance Record:\n\nTotal Days: ${attendance.totalDays}\nPresent: ${attendance.present}\nAbsent: ${attendance.absent}\nAttendance Percentage: ${attendance.percentage}%\n\n*${t('fromSchool')}*`;
          addMessage('ai', response, null, new Date().toISOString());
          return true;
        }
      }
      
      if (lowerQuery.includes('event') || lowerQuery.includes('function')) {
        const events = await getFirestoreData('events');
        if (events) {
          const upcoming = Object.values(events).filter(e => new Date(e.date) >= new Date());
          if (upcoming.length > 0) {
            const event = upcoming[0];
            const response = `Upcoming Event:\n\n${event.title}\nDate: ${event.date}\nTime: ${event.time}\nVenue: ${event.venue}\n\n${event.description}\n\n*${t('fromSchool')}*`;
            addMessage('ai', response, null, new Date().toISOString());
            return true;
          }
        }
      }
      
      if (lowerQuery.includes('circular') || lowerQuery.includes('notice')) {
        const circulars = await getFirestoreData('circulars');
        if (circulars) {
          const latest = Object.values(circulars)[0];
          const response = `Latest Circular:\n\n${latest.title}\nDate: ${latest.date}\n\n${latest.content}\n\n*${t('fromSchool')}*`;
          addMessage('ai', response, null, new Date().toISOString());
          return true;
        }
      }
      
      if (lowerQuery.includes('vacation') || lowerQuery.includes('holiday') || lowerQuery.includes('break')) {
        const vacations = await getFirestoreData('vacations');
        if (vacations) {
          const current = Object.values(vacations).find(v => {
            const start = new Date(v.startDate);
            const end = new Date(v.endDate);
            const now = new Date();
            return now >= start && now <= end;
          });
          
          if (current) {
            const response = `Current Vacation:\n\n${current.title}\n${current.startDate} to ${current.endDate}\n\n${current.description}\n\n*${t('fromSchool')}*`;
            addMessage('ai', response, null, new Date().toISOString());
            return true;
          }
          
          const upcoming = Object.values(vacations).find(v => new Date(v.startDate) > new Date());
          if (upcoming) {
            const response = `Upcoming Vacation:\n\n${upcoming.title}\n${upcoming.startDate} to ${upcoming.endDate}\n\n${upcoming.description}\n\n*${t('fromSchool')}*`;
            addMessage('ai', response, null, new Date().toISOString());
            return true;
          }
        }
      }
      
      // No school record found
      return false;
    }
    
    // API functions
    async function callGemini(messages) {
      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`;
      const body = {
        contents: messages
      };
      try {
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(body),
          signal: state.abortController ? state.abortController.signal : undefined
        });
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(`${t('apiError')} ${errorData.error?.message || response.statusText}`);
        }
        return await response.json();
      } catch (error) {
        if (error.name === 'AbortError') {
          throw error;
        }
        if (error.message.includes('Failed to fetch')) {
          throw new Error(t('networkError'));
        }
        throw error;
      }
    }
    
    async function generateResponse(userMessage, image = null) {
      // First check if this is a school-related query
      const isSchoolQuery = await processSchoolQuery(userMessage, null);
      if (isSchoolQuery) {
        return; // Response already added
      }
      
      // Show typing indicator
      const typingEl = document.createElement('div');
      typingEl.className = 'message ai';
      typingEl.dataset.id = 'typing';
      typingEl.innerHTML = `
        <div class="message-header">
          <span>Milli Ai</span>
          <span>${formatDate(new Date().toISOString())}</span>
        </div>
        <div class="typing-indicator">
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
        </div>
      `;
      elements.chatArea.appendChild(typingEl);
      elements.chatArea.scrollTop = elements.chatArea.scrollHeight;
      
      // Prepare messages for API
      const systemPrompt = getSystemPrompt();
      
      // Build conversation history
      const apiMessages = [
        {
          role: 'user',
          parts: [{ text: systemPrompt }]
        },
        {
          role: 'model',
          parts: [{ text: "I am ready to help." }]
        }
      ];
      
      // Add chat history
      if (state.activeChat && state.activeChat.messages.length > 0) {
        state.activeChat.messages.forEach(msg => {
          const role = msg.role === 'user' ? 'user' : 'model';
          const parts = [];
          if (msg.content) {
            parts.push({ text: msg.content });
          }
          if (msg.image && msg.image.base64) {
            parts.push({
              inline_data: {
                mime_type: msg.image.mime,
                data: msg.image.base64
              }
            });
          }
          apiMessages.push({ role, parts });
        });
      }
      
      // Add current message
      const userParts = [{ text: userMessage }];
      if (image && image.base64) {
        userParts.push({
          inline_data: {
            mime_type: image.mime,
            data: image.base64
          }
        });
      }
      apiMessages.push({ role: 'user', parts: userParts });
      
      try {
        // Create new AbortController for this request
        state.abortController = new AbortController();
        
        // Show stop button
        elements.sendBtn.style.display = 'none';
        elements.stopBtn.style.display = 'inline-block';
        
        const data = await callGemini(apiMessages);
        
        // Hide typing indicator
        typingEl.remove();
        
        // Extract response text
        const text = data.candidates?.[0]?.content?.parts?.[0]?.text;
        if (!text) {
          throw new Error('No response text received from AI');
        }
        
        // Add AI response
        addMessage('ai', text);
        
        // Play text-to-speech if enabled
        if (state.ttsEnabled && window.speechSynthesis) {
          speakText(text);
        }
        
      } catch (error) {
        if (error.name === 'AbortError') {
          // Request was aborted
          typingEl.querySelector('.typing-indicator').remove();
          typingEl.classList.remove('ai');
          typingEl.classList.add('message', 'user');
          typingEl.querySelector('.message-header span:first-child').textContent = 'You';
          typingEl.innerHTML += '<p><em>Response stopped</em></p>';
          elements.chatArea.appendChild(typingEl);
        } else {
          // Remove typing indicator
          typingEl.remove();
          showError(error.message, true);
        }
      } finally {
        // Reset abort controller
        state.abortController = null;
        elements.sendBtn.style.display = 'inline-block';
        elements.stopBtn.style.display = 'none';
      }
    }
    
    function regenerateResponse(messageId) {
      if (!state.activeChat) return;
      // Find the message with this ID
      const index = state.activeChat.messages.findIndex(m => m.id === messageId);
      if (index === -1) return;
      // Find the previous user message
      let userMessage = null;
      let userImage = null;
      for (let i = index - 1; i >= 0; i--) {
        if (state.activeChat.messages[i].role === 'user') {
          userMessage = state.activeChat.messages[i].content;
          userImage = state.activeChat.messages[i].image;
          break;
        }
      }
      if (!userMessage) return;
      // Remove the AI response we're regenerating
      state.activeChat.messages.splice(index, 1);
      saveChats();
      renderChat();
      // Generate new response
      generateResponse(userMessage, userImage);
    }
    
    // Text-to-Speech functions
    function speakText(text) {
      if (!window.speechSynthesis || !state.ttsEnabled) return;
      
      // Cancel any ongoing speech
      window.speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = state.language === 'hi' ? 'hi-IN' : 'en-US';
      utterance.rate = 0.9;
      utterance.pitch = 1;
      
      // Add TTS controls to the message
      const messageEl = document.querySelector(`.message.ai:not([data-id="typing"])`);
      if (messageEl) {
        let ttsControls = messageEl.querySelector('.tts-controls');
        if (!ttsControls) {
          ttsControls = document.createElement('div');
          ttsControls.className = 'tts-controls';
          ttsControls.innerHTML = `
            <button class="tts-btn tts-play">${t('tts.play')}</button>
            <button class="tts-btn tts-pause">${t('tts.pause')}</button>
            <button class="tts-btn tts-stop">${t('tts.stop')}</button>
          `;
          messageEl.appendChild(ttsControls);
          
          // Play button
          ttsControls.querySelector('.tts-play').addEventListener('click', () => {
            if (!window.speechSynthesis.speaking) {
              speakText(messageEl.querySelector('.message-content').innerText);
            } else {
              window.speechSynthesis.resume();
            }
          });
          
          // Pause button
          ttsControls.querySelector('.tts-pause').addEventListener('click', () => {
            window.speechSynthesis.pause();
          });
          
          // Stop button
          ttsControls.querySelector('.tts-stop').addEventListener('click', () => {
            window.speechSynthesis.cancel();
          });
        }
        
        // Show controls
        ttsControls.style.display = 'flex';
      }
      
      window.speechSynthesis.speak(utterance);
    }
    
    // Voice recognition
    function setupSpeechRecognition() {
      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        state.recognition = new SpeechRecognition();
        state.recognition.continuous = false;
        state.recognition.interimResults = false;
        state.recognition.lang = state.language === 'hi' ? 'hi-IN' : 'en-US';
        
        state.recognition.onstart = () => {
          state.isListening = true;
          elements.micBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#d93025" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
              <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
              <line x1="12" y1="19" x2="12" y2="23"></line>
              <line x1="8" y1="23" x2="16" y2="23"></line>
            </svg>
          `;
          elements.micBtn.title = t('voiceStart');
        };
        
        state.recognition.onresult = (event) => {
          const transcript = event.results[0][0].transcript;
          elements.composer.value = transcript;
          autoResize();
        };
        
        state.recognition.onend = () => {
          state.isListening = false;
          elements.micBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
              <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
              <line x1="12" y1="19" x2="12" y2="23"></line>
              <line x1="8" y1="23" x2="16" y2="23"></line>
            </svg>
          `;
          elements.micBtn.title = t('voiceInput');
        };
        
        state.recognition.onerror = (event) => {
          showError(t('voiceError'));
          state.isListening = false;
          elements.micBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
              <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
              <line x1="12" y1="19" x2="12" y2="23"></line>
              <line x1="8" y1="23" x2="16" y2="23"></line>
            </svg>
          `;
          elements.micBtn.title = t('voiceInput');
        };
      }
    }
    
    // Simulate real-time notifications
    function setupNotifications() {
      // Load notifications from "Firestore"
      loadNotifications();
      
      // Simulate real-time updates every 5 minutes
      setInterval(() => {
        loadNotifications();
      }, 5 * 60 * 1000);
    }
    
    async function loadNotifications() {
      try {
        const notificationsData = await getFirestoreData('notifications', 'global');
        if (notificationsData?.items) {
          // Filter active notifications
          const activeNotifications = notificationsData.items.filter(n => isNotificationActive(n));
          
          // Update state
          state.notifications = activeNotifications;
          state.unreadNotifications = activeNotifications.length;
          
          // Update UI
          updateNotificationBadge();
          renderNotificationsList();
          
          // Show toast for new notifications
          if (activeNotifications.length > 0) {
            const newNotif = activeNotifications[0];
            showNotificationToast(newNotif);
          }
        }
      } catch (error) {
        console.error('Failed to load notifications:', error);
      }
    }
    
    function updateNotificationBadge() {
      const badge = elements.notificationsBtn.querySelector('.notification-badge');
      if (state.unreadNotifications > 0) {
        if (!badge) {
          const newBadge = document.createElement('div');
          newBadge.className = 'notification-badge';
          newBadge.textContent = state.unreadNotifications > 9 ? '9+' : state.unreadNotifications.toString();
          elements.notificationsBtn.appendChild(newBadge);
        } else {
          badge.textContent = state.unreadNotifications > 9 ? '9+' : state.unreadNotifications.toString();
        }
      } else {
        if (badge) {
          badge.remove();
        }
      }
    }
    
    function renderNotificationsList() {
      const list = elements.notificationsList;
      if (state.notifications.length === 0) {
        list.innerHTML = '<div class="welcome-container"><p>' + t('noNotifications') + '</p></div>';
        return;
      }
      
      const fragment = document.createDocumentFragment();
      state.notifications.forEach(notif => {
        const div = document.createElement('div');
        div.className = 'message system';
        div.innerHTML = `
          <div class="message-header">
            <span>${t('notification')}</span>
            <span>${formatDate(notif.timestamp)}</span>
          </div>
          <div class="message-content">
            <strong>${notif.title}</strong>
            <p>${notif.message}</p>
            <small>Category: ${capitalize(notif.category)}</small>
          </div>
        `;
        fragment.appendChild(div);
      });
      
      list.innerHTML = '';
      list.appendChild(fragment);
    }
    
    function showNotificationToast(notification) {
      if (!state.notificationSound) return;
      
      // Create toast
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.innerHTML = `
        <div class="toast-icon">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#1a73e8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
            <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
          </svg>
        </div>
        <div class="toast-content">
          <div class="toast-title">${notification.title}</div>
          <div class="toast-message">${notification.message}</div>
        </div>
        <button class="toast-close">&times;</button>
        <div class="toast-actions">
          <button class="toast-btn view-btn">View</button>
        </div>
      `;
      
      // Close button
      toast.querySelector('.toast-close').addEventListener('click', () => {
        toast.remove();
      });
      
      // View button
      toast.querySelector('.view-btn').addEventListener('click', () => {
        // Add system message to chat
        addMessage('system', `${notification.title}\n\n${notification.message}\n\n*${t('fromSchool')}*`);
        toast.remove();
      });
      
      elements.toastContainer.appendChild(toast);
      
      // Auto-remove after 10 seconds
      setTimeout(() => {
        if (toast.parentNode) {
          toast.remove();
        }
      }, 10000);
      
      // Play notification sound if enabled
      if (state.notificationSound) {
        // In a real app, we would play a sound file
        // For demo, we'll just simulate it
        console.log('Playing notification sound');
      }
    }
    
    // Suggestion functions
    function updateSuggestions() {
      const container = elements.suggestionsContainer;
      container.innerHTML = '';
      
      // Always show some suggestions
      const suggestions = Object.values(t('suggestions'));
      suggestions.forEach(suggestion => {
        const chip = document.createElement('div');
        chip.className = 'suggestion-chip';
        chip.textContent = suggestion;
        chip.addEventListener('click', () => {
          elements.composer.value = suggestion;
          autoResize();
          elements.composer.focus();
        });
        container.appendChild(chip);
      });
    }
    
    // Export functions
    function exportChat(format = 'txt') {
      if (!state.activeChat) return;
      
      const chatTitle = state.activeChat.title;
      let content = `Milli Ai Chat Export\nSchool: Milli Karwaan Public School (MKPS), Balrampur\nDate: ${formatDateTime(new Date().toISOString())}\nChat: ${chatTitle}\n\n`;
      
      state.activeChat.messages.forEach(msg => {
        const sender = msg.role === 'user' ? 'You' : msg.role === 'system' ? 'System' : 'Milli Ai';
        content += `[${formatDateTime(msg.timestamp)}] ${sender}:\n${msg.content}\n\n`;
        
        if (msg.image && msg.image.dataUrl) {
          content += `[Image: ${msg.image.name}]\n\n`;
        }
      });
      
      if (format === 'txt') {
        const blob = new Blob([content], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${chatTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${Date.now()}.txt`;
        a.click();
        URL.revokeObjectURL(url);
      } else if (format === 'pdf') {
        // In a real app, we would use a PDF library
        // For demo, we'll just show a message
        showToast(t('export.success'), 'success');
      }
    }
    
    // Event handlers
    function handleSend() {
      const text = elements.composer.value.trim();
      const image = elements.composer.dataset.image ? JSON.parse(elements.composer.dataset.image) : null;
      if (!text && !image) return;
      
      // Add user message
      addMessage('user', text, image);
      
      // Clear composer
      elements.composer.value = '';
      elements.composer.style.height = '60px';
      delete elements.composer.dataset.image;
      
      // Remove any image preview
      const preview = elements.composer.parentNode.querySelector('.image-preview');
      if (preview) preview.remove();
      
      updateTokenCounter();
      
      // Generate AI response
      generateResponse(text, image);
    }
    
    function handleStop() {
      if (state.abortController) {
        state.abortController.abort();
      }
    }
    
    function handleUpload() {
      elements.fileInput.click();
    }
    
    function handleFileSelect(event) {
      const file = event.target.files[0];
      if (!file) return;
      
      // Validate file
      const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
      if (!validTypes.includes(file.type)) {
        showError('Please select a valid image, PDF, or document file.');
        return;
      }
      
      if (file.size > 10 * 1024 * 1024) {
        showError('File must be less than 10MB.');
        return;
      }
      
      // Read file
      const reader = new FileReader();
      reader.onload = function(e) {
        const fileData = {
          dataUrl: e.target.result,
          mime: file.type,
          name: file.name,
          size: file.size
        };
        
        // For images, show preview
        if (file.type.startsWith('image/')) {
          // Convert to base64 (remove data URL prefix)
          fileData.base64 = e.target.result.split(',')[1];
          
          // Display preview in composer
          let preview = elements.composer.parentNode.querySelector('.image-preview');
          if (!preview) {
            preview = document.createElement('div');
            preview.className = 'image-preview';
            preview.innerHTML = '<img alt="Preview" />';
            elements.composer.parentNode.insertBefore(preview, elements.composer.nextSibling);
          }
          preview.querySelector('img').src = fileData.dataUrl;
        } else {
          // For documents, show file info
          let preview = elements.composer.parentNode.querySelector('.image-preview');
          if (!preview) {
            preview = document.createElement('div');
            preview.className = 'image-preview';
            preview.style.padding = '10px';
            preview.style.backgroundColor = 'var(--bg-tertiary)';
            preview.style.textAlign = 'center';
            elements.composer.parentNode.insertBefore(preview, elements.composer.nextSibling);
          }
          preview.innerHTML = `
            <div style="font-size: 0.9em; word-break: break-all;">📄 ${file.name}</div>
            <div style="font-size: 0.8em; color: var(--text-tertiary);">${(file.size / 1024).toFixed(0)} KB</div>
          `;
        }
        
        // Store file data in composer
        elements.composer.dataset.image = JSON.stringify(fileData);
      };
      reader.readAsDataURL(file);
    }
    
    function handleMicClick() {
      if (state.isListening) {
        state.recognition.stop();
      } else {
        if (state.recognition) {
          state.recognition.lang = state.language === 'hi' ? 'hi-IN' : 'en-US';
          state.recognition.start();
        } else {
          showError('Speech recognition not supported in your browser.');
        }
      }
    }
    
    function handleTTSClick() {
      // Toggle TTS
      state.ttsEnabled = !state.ttsEnabled;
      elements.ttsBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="${state.ttsEnabled ? 'currentColor' : '#8e949a'}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
          <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
          <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
        </svg>
      `;
      showToast(`Text-to-Speech ${state.ttsEnabled ? 'enabled' : 'disabled'}`, 'info', 2000);
    }
    
    function autoResize() {
      const textarea = elements.composer;
      textarea.style.height = '60px';
      const height = Math.min(textarea.scrollHeight, 200);
      textarea.style.height = height + 'px';
    }
    
    function showError(message, showTryAgain = false) {
      elements.errorBanner.textContent = message;
      elements.errorBanner.classList.add('active');
      // Clear existing actions
      const actions = elements.errorBanner.querySelector('.error-actions');
      if (actions) actions.remove();
      if (showTryAgain) {
        const actionDiv = document.createElement('div');
        actionDiv.className = 'error-actions';
        actionDiv.innerHTML = `<button class="btn btn-secondary">${t('tryAgain')}</button>`;
        elements.errorBanner.appendChild(actionDiv);
        actionDiv.querySelector('button').addEventListener('click', () => {
          elements.errorBanner.classList.remove('active');
          if (state.activeChat && state.activeChat.messages.length > 0) {
            const lastUserMsg = [...state.activeChat.messages].reverse().find(m => m.role === 'user');
            if (lastUserMsg) {
              generateResponse(lastUserMsg.content, lastUserMsg.image);
            }
          }
        });
      }
    }
    
    function clearError() {
      elements.errorBanner.classList.remove('active');
    }
    
    // Modal functions
    function openSettings() {
      elements.settingsModal.classList.add('active');
      elements.overlay.classList.add('active');
      elements.defaultThemeSelect.value = state.theme;
      elements.defaultLangSelect.value = state.language;
      elements.ttsEnabledSelect.value = state.ttsEnabled.toString();
      elements.notificationSoundSelect.value = state.notificationSound.toString();
      elements.settingsError.classList.remove('active');
    }
    
    function closeSettings() {
      elements.settingsModal.classList.remove('active');
      elements.overlay.classList.remove('active');
    }
    
    function openSearch() {
      elements.searchModal.classList.add('active');
      elements.overlay.classList.add('active');
      elements.globalSearch.value = '';
      elements.searchResults.innerHTML = '';
      elements.globalSearch.focus();
    }
    
    function closeSearch() {
      elements.searchModal.classList.remove('active');
      elements.overlay.classList.remove('active');
    }
    
    function openNotifications() {
      elements.notificationsModal.classList.add('active');
      elements.overlay.classList.add('active');
      renderNotificationsList();
      // Mark notifications as read
      state.unreadNotifications = 0;
      updateNotificationBadge();
    }
    
    function closeNotifications() {
      elements.notificationsModal.classList.remove('active');
      elements.overlay.classList.remove('active');
    }
    
    function closeMobileMenu() {
      elements.sidebar.classList.remove('active');
      elements.overlay.classList.remove('active');
    }
    
    // Theme functions
    function applyTheme() {
      const theme = state.theme;
      if (theme === 'system') {
        document.documentElement.removeAttribute('data-theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        document.documentElement.style.colorScheme = prefersDark ? 'dark' : 'light';
      } else {
        document.documentElement.setAttribute('data-theme', theme);
        document.documentElement.style.colorScheme = theme;
      }
    }
    
    function toggleTheme() {
      if (state.theme === 'system') {
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        state.theme = prefersDark ? 'light' : 'dark';
      } else if (state.theme === 'light') {
        state.theme = 'dark';
      } else {
        state.theme = 'light';
      }
      applyTheme();
      saveState();
    }
    
    // Search functions
    function performSearch(query) {
      if (!query.trim()) {
        elements.searchResults.innerHTML = '';
        return;
      }
      const results = [];
      state.chats.forEach(chat => {
        const chatResults = chat.messages
          .filter(msg => msg.content && msg.content.toLowerCase().includes(query.toLowerCase()))
          .map(msg => ({
            chatId: chat.id,
            chatTitle: chat.title,
            messageId: msg.id,
            role: msg.role,
            content: msg.content,
            timestamp: msg.timestamp
          }));
        results.push(...chatResults);
      });
      const fragment = document.createDocumentFragment();
      if (results.length === 0) {
        const noResults = document.createElement('div');
        noResults.textContent = 'No results found';
        noResults.style.color = 'var(--text-secondary)';
        noResults.style.padding = '10px';
        fragment.appendChild(noResults);
      } else {
        results.forEach(result => {
          const div = document.createElement('div');
          div.className = 'search-result';
          // Highlight matches
          const escapedQuery = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          const regex = new RegExp(`(${escapedQuery})`, 'gi');
          const highlightedContent = result.content.replace(regex, '<span class="search-highlight">$1</span>');
          div.innerHTML = `
            <div><strong>${result.chatTitle}</strong> - ${result.role === 'user' ? 'You' : 'Milli Ai'}</div>
            <div class="search-result-message">${highlightedContent}</div>
            <div style="font-size: 0.8em; color: var(--text-secondary);">${formatDate(result.timestamp)}</div>
          `;
          div.addEventListener('click', () => {
            state.currentChatId = result.chatId;
            state.activeChat = getChat(result.chatId);
            saveState();
            renderChatsList();
            renderChat();
            closeSearch();
            // Scroll to message
            setTimeout(() => {
              const messageEl = document.querySelector(`.message[data-id="${result.messageId}"]`);
              if (messageEl) {
                messageEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
                messageEl.style.backgroundColor = 'var(--hover)';
                setTimeout(() => {
                  messageEl.style.backgroundColor = '';
                }, 2000);
              }
            }, 300);
          });
          fragment.appendChild(div);
        });
      }
      elements.searchResults.innerHTML = '';
      elements.searchResults.appendChild(fragment);
    }
    
    // PWA functions
    function setupPWA() {
      // Listen for beforeinstallprompt event
      window.addEventListener('beforeinstallprompt', (e) => {
        // Prevent the mini-infobar from appearing on mobile
        e.preventDefault();
        // Stash the event so it can be triggered later
        state.installPrompt = e;
        // Update UI to show install button
        elements.installPrompt.style.display = 'flex';
      });
      
      // Install button click
      elements.installAccept.addEventListener('click', () => {
        if (state.installPrompt) {
          // Show the prompt
          state.installPrompt.prompt();
          // Wait for the user to respond to the prompt
          state.installPrompt.userChoice.then((choiceResult) => {
            if (choiceResult.outcome === 'accepted') {
              console.log('User accepted the install prompt');
            } else {
              console.log('User dismissed the install prompt');
            }
            // Clear the saved prompt since it can't be used again
            state.installPrompt = null;
            // Hide the install button
            elements.installPrompt.style.display = 'none';
          });
        }
      });
      
      // Cancel button click
      elements.installCancel.addEventListener('click', () => {
        elements.installPrompt.style.display = 'none';
        state.installPrompt = null;
      });
      
      // Hide the install prompt if the app is already installed
      window.addEventListener('appinstalled', () => {
        elements.installPrompt.style.display = 'none';
        state.installPrompt = null;
        console.log('PWA was installed');
      });
    }
    
    // Initialize
    async function init() {
      // Initialize IndexedDB
      try {
        await db.open();
      } catch (e) {
        console.error('Failed to initialize IndexedDB:', e);
      }
      
      // Load state
      await loadState();
      await loadChats();
      
      // Set current chat
      if (state.currentChatId) {
        state.activeChat = getChat(state.currentChatId);
      }
      
      // Render UI
      renderChatsList();
      renderChat();
      updateTokenCounter();
      
      // Setup features
      setupSpeechRecognition();
      setupNotifications();
      setupPWA();
      
      // Update suggestions
      updateSuggestions();
      
      // Event listeners
      elements.menuToggle.addEventListener('click', () => {
        elements.sidebar.classList.add('active');
        elements.overlay.classList.add('active');
      });
      
      elements.overlay.addEventListener('click', closeMobileMenu);
      
      elements.newChatBtn.addEventListener('click', createNewChat);
      
      // Handle the start chat button in welcome screen
      document.addEventListener('click', (e) => {
        if (e.target.closest('#startChatBtn') || e.target.closest('#startChatBtnInternal')) {
          createNewChat();
        }
      });
      
      elements.chatsSearch.addEventListener('input', debounce(() => {
        renderChatsList();
      }, 300));
      
      elements.searchBtn.addEventListener('click', openSearch);
      
      elements.themeToggle.addEventListener('click', toggleTheme);
      
      elements.langToggle.addEventListener('click', () => {
        state.language = state.language === 'en' ? 'hi' : 'en';
        elements.langToggle.textContent = state.language.toUpperCase();
        if (state.recognition) {
          state.recognition.lang = state.language === 'hi' ? 'hi-IN' : 'en-US';
        }
        updateTexts();
        saveState();
      });
      
      elements.notificationsBtn.addEventListener('click', openNotifications);
      
      elements.settingsBtn.addEventListener('click', openSettings);
      
      elements.composer.addEventListener('input', () => {
        autoResize();
        updateSuggestions();
      });
      
      elements.composer.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          handleSend();
        }
      });
      
      elements.uploadBtn.addEventListener('click', handleUpload);
      
      elements.fileInput.addEventListener('change', handleFileSelect);
      
      elements.micBtn.addEventListener('click', handleMicClick);
      
      elements.ttsBtn.addEventListener('click', handleTTSClick);
      
      elements.sendBtn.addEventListener('click', handleSend);
      
      elements.stopBtn.addEventListener('click', handleStop);
      
      elements.closeSettings.addEventListener('click', closeSettings);
      
      elements.cancelSettings.addEventListener('click', closeSettings);
      
      elements.saveSettings.addEventListener('click', () => {
        const theme = elements.defaultThemeSelect.value;
        const language = elements.defaultLangSelect.value;
        const ttsEnabled = elements.ttsEnabledSelect.value === 'true';
        const notificationSound = elements.notificationSoundSelect.value === 'true';
        
        state.theme = theme;
        state.language = language;
        state.ttsEnabled = ttsEnabled;
        state.notificationSound = notificationSound;
        
        // Update UI
        applyTheme();
        updateTexts();
        elements.langToggle.textContent = state.language.toUpperCase();
        
        // Update TTS button
        elements.ttsBtn.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="${state.ttsEnabled ? 'currentColor' : '#8e949a'}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
            <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
            <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
          </svg>
        `;
        
        saveState();
        closeSettings();
        showToast('Settings saved', 'success');
      });
      
      elements.resetAppBtn.addEventListener('click', () => {
        if (confirm(t('confirmReset'))) {
          // Clear IndexedDB
          Promise.all(state.collections.map(collection => db.clear(collection)))
            .then(() => {
              // Clear localStorage
              localStorage.removeItem('milliAi:state');
              localStorage.removeItem('milliAi:chats');
              
              showToast(t('appReset'), 'success');
              setTimeout(() => {
                location.reload();
              }, 1000);
            })
            .catch(err => {
              console.error('Failed to reset app:', err);
              showError('Failed to reset app');
            });
        }
      });
      
      elements.globalSearch.addEventListener('input', debounce((e) => {
        performSearch(e.target.value);
      }, 300));
      
      elements.closeSearch.addEventListener('click', closeSearch);
      
      elements.closeNotifications.addEventListener('click', closeNotifications);
      
      document.addEventListener('keydown', (e) => {
        // Ctrl+N: New chat
        if (e.ctrlKey && e.key === 'n') {
          e.preventDefault();
          createNewChat();
        }
        // Ctrl+K: Focus search
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
          e.preventDefault();
          openSearch();
        }
        // Ctrl+.: Toggle theme
        if ((e.ctrlKey || e.metaKey) && e.key === '.') {
          e.preventDefault();
          toggleTheme();
        }
        // Escape: Close modals
        if (e.key === 'Escape') {
          closeMobileMenu();
          closeSettings();
          closeSearch();
          closeNotifications();
        }
        // Forward slash: Focus input
        if (e.key === '/' && !['INPUT', 'TEXTAREA'].includes(document.activeElement.tagName)) {
          e.preventDefault();
          elements.composer.focus();
        }
      });
      
      // Click outside modals to close
      elements.settingsModal.addEventListener('click', (e) => {
        if (e.target === elements.settingsModal) closeSettings();
      });
      
      elements.searchModal.addEventListener('click', (e) => {
        if (e.target === elements.searchModal) closeSearch();
      });
      
      elements.notificationsModal.addEventListener('click', (e) => {
        if (e.target === elements.notificationsModal) closeNotifications();
      });
      
      // Handle window resize
      window.addEventListener('resize', () => {
        if (window.innerWidth > 768) {
          closeMobileMenu();
        }
      });
      
      // Clear error when typing
      elements.composer.addEventListener('input', clearError);
      
      // Initial TTS button state
      elements.ttsBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="${state.ttsEnabled ? 'currentColor' : '#8e949a'}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
          <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
          <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
        </svg>
      `;
    }
    
    // Start the app
    document.addEventListener('DOMContentLoaded', init);
  </script>
</body>
</html>